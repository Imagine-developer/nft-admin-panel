{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport contactList from '../../routes/Contact/data/contactList';\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios';\nimport './index.css';\nvar contactId = 723812738;\n\nvar Contact = /*#__PURE__*/function (_Component) {\n  _inherits(Contact, _Component);\n\n  var _super = _createSuper(Contact);\n\n  function Contact() {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"ContactSideBar\", function (user) {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-contacts gx-mr-4\"\n      }), __jsx(\"span\", null, __jsx(IntlMessages, {\n        id: \"chat.contacts\"\n      })))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: _this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New User\"))))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactSelect\", function (data) {\n      data.selected = !data.selected;\n      var selectedContacts = 0;\n\n      var contactList = _this.state.contactList.map(function (contact) {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      _this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddContact\", function () {\n      _this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactClose\", function () {\n      _this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveContact\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        var isNew, contactList, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isNew = true;\n                _context2.next = 3;\n                return _this.state.allContact.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(contact) {\n                    var res;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!(contact._id === data._id)) {\n                              _context.next = 8;\n                              break;\n                            }\n\n                            isNew = false;\n                            _context.next = 4;\n                            return axios.post('http://localhost:8000/user/register', data);\n\n                          case 4:\n                            res = _context.sent;\n                            return _context.abrupt(\"return\", data);\n\n                          case 8:\n                            return _context.abrupt(\"return\", contact);\n\n                          case 9:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n              case 3:\n                contactList = _context2.sent;\n\n                if (!isNew) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 7;\n                return axios.post('http://localhost:8000/user/register', data);\n\n              case 7:\n                res = _context2.sent;\n                contactList.push(data);\n\n              case 9:\n                console.log(contactList);\n                Promise.resolve.apply(Promise, _toConsumableArray(contactList)).then(function (res) {\n                  _this.setState({\n                    alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n                    showMessage: true,\n                    contactList: [res],\n                    allContact: [res]\n                  });\n                }); // this.onFilterOptionSelect(this.state.filterOption);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteContact\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios[\"delete\"]('http://localhost:8000/user/' + data._id);\n\n              case 2:\n                res = _context3.sent;\n\n                _this.setState({\n                  alertMessage: 'Contact Deleted Successfully',\n                  showMessage: true,\n                  allContact: _this.state.allContact.filter(function (contact) {\n                    return contact._id !== data._id;\n                  }),\n                  contactList: _this.state.allContact.filter(function (contact) {\n                    return contact._id !== data._id;\n                  })\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteSelectedContact\", function () {\n      var contacts = _this.state.allContact.filter(function (contact) {\n        return !contact.selected;\n      });\n\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterContact\", function (userName) {\n      var filterOption = _this.state.filterOption;\n\n      if (userName === '') {\n        _this.setState({\n          contactList: _this.state.allContact\n        });\n      } else {\n        var filterContact = _this.state.allContact.filter(function (contact) {\n          return contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1;\n        });\n\n        if (filterOption === 'All contacts') {\n          _this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.frequently;\n            })\n          });\n        } else if (filterOption === 'Starred contacts') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.starred;\n            })\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRequestClose\", function () {\n      _this.setState({\n        showMessage: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAllContact\", function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread(_objectSpread({}, contact), {}, {\n          selected: true\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnselectedAllContact\", function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread(_objectSpread({}, contact), {}, {\n          selected: false\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.get('http://localhost:8000/users');\n\n              case 2:\n                res = _context4.sent;\n                this.setState({\n                  contactList: res.data,\n                  allContact: res.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"onAllContactSelect\",\n    value: function onAllContactSelect() {\n      var selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n      if (selectAll) {\n        this.getAllContact();\n      } else {\n        this.getUnselectedAllContact();\n      }\n    }\n  }, {\n    key: \"updateContactUser\",\n    value: function updateContactUser(evt) {\n      this.setState({\n        searchUser: evt.target.value\n      });\n      this.filterContact(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          contactList = _this$state.contactList,\n          addContactState = _this$state.addContactState,\n          drawerState = _this$state.drawerState,\n          selectedContacts = _this$state.selectedContacts,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      console.log(contactList);\n      return __jsx(\"div\", {\n        className: \"gx-main-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-app-module\"\n      }, __jsx(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\"\n      }, __jsx(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this)\n      }, this.ContactSideBar())), __jsx(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n      }, this.ContactSideBar(user)), __jsx(\"div\", {\n        className: \"gx-module-box\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-header\"\n      }, __jsx(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this)\n      })), __jsx(AppModuleHeader, {\n        placeholder: \"Search contact\",\n        notification: false,\n        apps: false,\n        user: this.state.user,\n        onChange: this.updateContactUser.bind(this),\n        value: this.state.searchUser\n      })), __jsx(\"div\", {\n        className: \"gx-module-box-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-topbar\"\n      }, __jsx(Checkbox, {\n        color: \"primary\",\n        className: \"gx-icon-btn\",\n        indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n        checked: selectedContacts > 0,\n        onChange: this.onAllContactSelect.bind(this),\n        value: \"SelectMail\"\n      }), selectedContacts > 0 && __jsx(\"i\", {\n        className: \"gx-icon-btn icon icon-trash\",\n        onClick: this.onDeleteSelectedContact.bind(this)\n      })), __jsx(CustomScrollbars, {\n        className: \"gx-module-content-scroll\"\n      }, contactList.length === 0 ? __jsx(\"div\", {\n        className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\"\n      }, noContentFoundMessage) : __jsx(ContactList, {\n        contactList: contactList,\n        onContactSelect: this.onContactSelect.bind(this),\n        onDeleteContact: this.onDeleteContact.bind(this),\n        onSaveContact: this.onSaveContact.bind(this)\n      }))))), __jsx(AddContact, {\n        open: addContactState,\n        contact: {\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false\n        },\n        onSaveContact: this.onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact\n      }), showMessage && message.info(__jsx(\"span\", {\n        id: \"message-id\"\n      }, alertMessage), 3, this.handleRequestClose));\n    }\n  }]);\n\n  return Contact;\n}(Component);\n\nexport default Contact;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Contact/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","axios","contactId","Contact","user","onAddContact","data","selected","selectedContacts","state","map","contact","id","setState","addContactState","isNew","allContact","_id","post","res","push","console","log","Promise","resolve","then","alertMessage","showMessage","filter","contacts","userName","filterOption","filterContact","name","toLowerCase","indexOf","frequently","starred","length","noContentFoundMessage","selectedSectionId","drawerState","email","avatar","searchUser","selectedContact","get","selectAll","getAllContact","getUnselectedAllContact","evt","target","value","onToggleDrawer","bind","ContactSideBar","updateContactUser","onAllContactSelect","onDeleteSelectedContact","onContactSelect","onDeleteContact","onSaveContact","onContactClose","info","handleRequestClose"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Checkbox, Drawer, message} from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\n\nimport contactList from '../../routes/Contact/data/contactList'\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios'\nimport './index.css';\n\nlet contactId = 723812738;\n\nclass Contact extends Component {\n  async componentWillMount(){\n    const res = await axios.get('http://localhost:8000/users')\n    this.setState({contactList: res.data, allContact: res.data})\n  }\n\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <i className=\"icon icon-contacts gx-mr-4\"/>\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New User</span>\n            </Button>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  onContactSelect = (data) => {\n    data.selected = !data.selected;\n    let selectedContacts = 0;\n    const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n          return data;\n        } else {\n          return contact;\n        }\n      }\n    );\n    this.setState({\n      selectedContacts: selectedContacts,\n      contactList: contactList\n    });\n\n  };\n\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onSaveContact = async (data) => {\n    let isNew = true;\n    const contactList = await this.state.allContact.map(async (contact) => {\n      if (contact._id === data._id) {\n        isNew = false\n        const res = await axios.post('http://localhost:8000/user/register', data)\n        return data\n      } else {\n        return contact\n      }\n    })\n    if (isNew) {\n      const res = await axios.post('http://localhost:8000/user/register', data)\n      contactList.push(data);\n    }\n    console.log(contactList)\n    Promise.resolve(...contactList).then((res) => {\n          this.setState({\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n      showMessage: true,\n      contactList: [res],\n      allContact: [res]\n    });\n    })\n\n    // this.onFilterOptionSelect(this.state.filterOption);\n  };\n  onDeleteContact = async (data) => {\n    const res = await axios.delete('http://localhost:8000/user/' + data._id)\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: this.state.allContact.filter((contact) => contact._id !== data._id),\n      contactList: this.state.allContact.filter((contact) => contact._id !== data._id)\n    })\n  };\n  onDeleteSelectedContact = () => {\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: contacts,\n      contactList: contacts,\n      selectedContacts: 0\n    })\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = this.state.allContact.filter((contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n  getAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: true\n    } : contact);\n    this.setState({\n      selectedContacts: contactList.length,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n  getUnselectedAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: false\n    } : contact);\n    this.setState({\n      selectedContacts: 0,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false,\n    }\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    console.log(contactList)\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n           <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div> \n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <div className=\"gx-module-box-topbar\">\n                <Checkbox color=\"primary\" className=\"gx-icon-btn\"\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\n                          checked={selectedContacts > 0}\n                          onChange={this.onAllContactSelect.bind(this)}\n                          value=\"SelectMail\"/>\n\n\n                {selectedContacts > 0 &&\n                <i className=\"gx-icon-btn icon icon-trash\" onClick={this.onDeleteSelectedContact.bind(this)}/>}\n\n              </div>\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n                {contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 onContactSelect={this.onContactSelect.bind(this)}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}