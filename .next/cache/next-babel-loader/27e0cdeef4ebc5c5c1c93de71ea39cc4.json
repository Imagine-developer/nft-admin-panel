{"ast":null,"code":"import Web3 from \"web3\";\n\nconst connectMetaMask = async () => {\n  let userAddress, web3;\n\n  if (window.ethereum) {\n    web3 = await new Web3(window.ethereum);\n    console.log(\"connect MetaMask\");\n\n    try {\n      await window.ethereum.enable().then(async function () {\n        // User has allowed account access to DApp...\n        console.log(\"step2\");\n\n        if (web3) {\n          if (window.ethereum.selectedAddress !== undefined) {\n            userAddress = window.ethereum.selectedAddress;\n          } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n            userAddress = web3.givenProvider.MetamaskInpageProvider;\n          } else if (web3.givenProvider.selectedAddress !== undefined) {\n            userAddress = web3.givenProvider.selectedAddress;\n          }\n        }\n      });\n      console.log(\"userAddress: \", userAddress);\n      return {\n        userAddress,\n        web3\n      };\n    } catch (e) {\n      // User has denied account access to DApp...\n      console.log(e);\n    }\n  } // Legacy DApp Browsers\n  else if (window.web3) {\n    web3 = await new Web3(web3.currentProvider);\n    console.log(web3);\n    console.log(\"connect MetaMask\");\n\n    if (web3) {\n      if (window.ethereum.selectedAddress !== undefined) {\n        userAddress = window.ethereum.selectedAddress;\n      } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n        userAddress = web3.givenProvider.MetamaskInpageProvider;\n      } else if (web3.givenProvider.selectedAddress !== undefined) {\n        userAddress = web3.givenProvider.selectedAddress;\n      }\n\n      console.log(\"userAddress: \", userAddress);\n    }\n\n    return {\n      userAddress,\n      web3\n    };\n  } // Non-DApp Browsers\n  else {\n    console.log(\"You have to install MetaMask !\");\n  }\n};\n\nexport default connectMetaMask;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Tokens/metamask.js"],"names":["Web3","connectMetaMask","userAddress","web3","window","ethereum","console","log","enable","then","selectedAddress","undefined","givenProvider","MetamaskInpageProvider","e","currentProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,eAAe,GAAG,YAAU;AAChC,MAAIC,WAAJ,EAAiBC,IAAjB;;AACA,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBF,IAAAA,IAAI,GAAG,MAAM,IAAIH,IAAJ,CAASI,MAAM,CAACC,QAAhB,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAEA,QAAI;AACF,YAAMH,MAAM,CAACC,QAAP,CAAgBG,MAAhB,GAAyBC,IAAzB,CAA8B,kBAAkB;AACpD;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,YAAIJ,IAAJ,EAAU;AACR,cAAIC,MAAM,CAACC,QAAP,CAAgBK,eAAhB,KAAoCC,SAAxC,EAAmD;AACjDT,YAAAA,WAAW,GAAGE,MAAM,CAACC,QAAP,CAAgBK,eAA9B;AACD,WAFD,MAEO,IAAIP,IAAI,CAACS,aAAL,CAAmBC,sBAAnB,KAA8CF,SAAlD,EAA6D;AAClET,YAAAA,WAAW,GAAGC,IAAI,CAACS,aAAL,CAAmBC,sBAAjC;AACD,WAFM,MAEA,IAAIV,IAAI,CAACS,aAAL,CAAmBF,eAAnB,KAAuCC,SAA3C,EAAsD;AAC3DT,YAAAA,WAAW,GAAGC,IAAI,CAACS,aAAL,CAAmBF,eAAjC;AACD;AACF;AACF,OAZK,CAAN;AAaHJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,WAA7B;AACG,aAAO;AAACA,QAAAA,WAAD;AAAcC,QAAAA;AAAd,OAAP;AACD,KAhBD,CAgBE,OAAOW,CAAP,EAAU;AACV;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYO,CAAZ;AACD;AACF,GAxBD,CAyBA;AAzBA,OA0BK,IAAIV,MAAM,CAACD,IAAX,EAAiB;AACpBA,IAAAA,IAAI,GAAG,MAAM,IAAIH,IAAJ,CAASG,IAAI,CAACY,eAAd,CAAb;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AACA,QAAIJ,IAAJ,EAAU;AACR,UAAIC,MAAM,CAACC,QAAP,CAAgBK,eAAhB,KAAoCC,SAAxC,EAAmD;AACjDT,QAAAA,WAAW,GAAGE,MAAM,CAACC,QAAP,CAAgBK,eAA9B;AACD,OAFD,MAEO,IAAIP,IAAI,CAACS,aAAL,CAAmBC,sBAAnB,KAA8CF,SAAlD,EAA6D;AAClET,QAAAA,WAAW,GAAGC,IAAI,CAACS,aAAL,CAAmBC,sBAAjC;AACD,OAFM,MAEA,IAAIV,IAAI,CAACS,aAAL,CAAmBF,eAAnB,KAAuCC,SAA3C,EAAsD;AAC3DT,QAAAA,WAAW,GAAGC,IAAI,CAACS,aAAL,CAAmBF,eAAjC;AACD;;AACDJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,WAA7B;AACD;;AACD,WAAO;AAACA,MAAAA,WAAD;AAAcC,MAAAA;AAAd,KAAP;AACD,GAfI,CAgBL;AAhBK,OAiBA;AACHG,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,CAhDD;;AAkDA,eAAeN,eAAf","sourcesContent":["import Web3 from \"web3\"\n\nconst connectMetaMask = async ()=>{\n  let userAddress, web3\n  if (window.ethereum) {\n    web3 = await new Web3(window.ethereum);\n    console.log(\"connect MetaMask\");\n\n    try {\n      await window.ethereum.enable().then(async function () {\n        // User has allowed account access to DApp...\n        console.log(\"step2\");\n        if (web3) {\n          if (window.ethereum.selectedAddress !== undefined) {\n            userAddress = window.ethereum.selectedAddress;\n          } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n            userAddress = web3.givenProvider.MetamaskInpageProvider;\n          } else if (web3.givenProvider.selectedAddress !== undefined) {\n            userAddress = web3.givenProvider.selectedAddress;\n          }\n        }\n      })\n\t  console.log(\"userAddress: \", userAddress)\n      return {userAddress, web3}\n    } catch (e) {\n      // User has denied account access to DApp...\n      console.log(e);\n    }\n  }\n  // Legacy DApp Browsers\n  else if (window.web3) {\n    web3 = await new Web3(web3.currentProvider);\n    console.log(web3);\n    console.log(\"connect MetaMask\");\n    if (web3) {\n      if (window.ethereum.selectedAddress !== undefined) {\n        userAddress = window.ethereum.selectedAddress;\n      } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n        userAddress = web3.givenProvider.MetamaskInpageProvider;\n      } else if (web3.givenProvider.selectedAddress !== undefined) {\n        userAddress = web3.givenProvider.selectedAddress;\n      }\n      console.log(\"userAddress: \", userAddress);\n    }\n    return {userAddress, web3}\n  }\n  // Non-DApp Browsers\n  else {\n    console.log(\"You have to install MetaMask !\");\n  }\n}\n\nexport default connectMetaMask"]},"metadata":{},"sourceType":"module"}