{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Button, Input, message, Modal, Upload } from \"antd\";\nimport Moment from \"moment\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\nvar TextArea = Input.TextArea;\nvar props = {\n  name: 'file',\n  action: '//jsonplaceholder.typicode.com/posts/',\n  headers: {\n    authorization: 'authorization-text'\n  },\n  onChange: function onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n\n    if (info.file.status === 'done') {\n      message.success(\"\".concat(info.file.name, \" file uploaded successfully\"));\n    } else if (info.file.status === 'error') {\n      message.error(\"\".concat(info.file.name, \" file upload failed.\"));\n    }\n  }\n};\n\nvar ComposeMail = /*#__PURE__*/function (_React$Component) {\n  _inherits(ComposeMail, _React$Component);\n\n  var _super = _createSuper(ComposeMail);\n\n  function ComposeMail() {\n    var _this;\n\n    _classCallCheck(this, ComposeMail);\n\n    _this = _super.call(this);\n    _this.state = {\n      to: '',\n      cc: '',\n      bcc: '',\n      subject: '',\n      message: ''\n    };\n    return _this;\n  }\n\n  _createClass(ComposeMail, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          onMailSend = _this$props.onMailSend,\n          onClose = _this$props.onClose,\n          user = _this$props.user;\n      var _this$state = this.state,\n          to = _this$state.to,\n          subject = _this$state.subject,\n          message = _this$state.message;\n      return __jsx(Modal, {\n        onCancel: onClose,\n        visible: this.props.open,\n        title: __jsx(IntlMessages, {\n          id: \"mail.title\"\n        }),\n        closable: false,\n        onOk: function onOk() {\n          if (to === '') return;\n          onClose();\n          onMailSend({\n            'id': '15453a06c08fb021776',\n            'from': {\n              'name': user.name,\n              'avatar': user.avatar,\n              'email': user.email\n            },\n            'to': [{\n              'name': to,\n              'email': to\n            }],\n            'subject': subject,\n            'message': message,\n            'time': Moment().format('DD MMM'),\n            'read': false,\n            'starred': false,\n            'important': false,\n            'hasAttachments': false,\n            'folder': 1,\n            'selected': false,\n            'labels': []\n          });\n        },\n        style: {\n          zIndex: 2600\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        placeholder: \"To*\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            to: event.target.value\n          });\n        },\n        defaultValue: to,\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        placeholder: \"Subject\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            subject: event.target.value\n          });\n        },\n        value: subject,\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(TextArea, {\n        placeholder: \"Message\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            message: event.target.value\n          });\n        },\n        value: message,\n        autosize: {\n          minRows: 2,\n          maxRows: 6\n        },\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Upload, props, __jsx(Button, {\n        type: \"primary\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-attachment\"\n      }), \" Attach File\"))));\n    }\n  }]);\n\n  return ComposeMail;\n}(React.Component);\n\nexport default ComposeMail;","map":null,"metadata":{},"sourceType":"module"}