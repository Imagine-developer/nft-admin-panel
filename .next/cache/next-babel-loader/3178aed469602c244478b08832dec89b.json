{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Menu } from \"antd\";\nimport Link from \"next/link\";\nimport { useRouter } from 'next/router';\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport SidebarLogo from \"./SidebarLogo\";\nimport UserProfile from \"./UserProfile\";\nimport AppsNavigation from \"./AppsNavigation\";\nimport { NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR, NAV_STYLE_NO_HEADER_MINI_SIDEBAR, THEME_TYPE_LITE } from \"../../../constants/ThemeSetting\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPathName } from \"../../../redux/actions\";\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nconst SidebarContent = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  let {\n    navStyle,\n    themeType,\n    pathname\n  } = useSelector(({\n    settings\n  }) => settings);\n\n  const getNoHeaderClass = navStyle => {\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\n      return \"gx-no-header-notifications\";\n    }\n\n    return \"\";\n  };\n\n  const getNavStyleSubMenuClass = navStyle => {\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n      return \"gx-no-header-submenu-popup\";\n    }\n\n    return \"\";\n  };\n\n  useEffect(() => {\n    dispatch(setPathName(router.pathname));\n  }, [router.pathname]);\n  const selectedKeys = router.pathname.substr(1) || 'sample';\n  const defaultOpenKeys = selectedKeys.split('/')[1];\n  return __jsx(React.Fragment, null, __jsx(SidebarLogo, null), __jsx(\"div\", {\n    className: \"gx-sidebar-content\"\n  }, __jsx(\"div\", {\n    className: `gx-sidebar-notifications ${getNoHeaderClass(navStyle)}`\n  }, __jsx(UserProfile, null), __jsx(AppsNavigation, null)), __jsx(CustomScrollbars, {\n    className: \"gx-layout-sider-scrollbar\"\n  }, __jsx(Menu, {\n    defaultOpenKeys: [defaultOpenKeys],\n    selectedKeys: [selectedKeys],\n    theme: themeType === THEME_TYPE_LITE ? 'lite' : 'dark',\n    mode: \"inline\"\n  }, __jsx(Menu.Item, {\n    key: \"sample\"\n  }, __jsx(Link, {\n    href: \"/banners\"\n  }, __jsx(\"a\", null, __jsx(\"i\", {\n    className: \"icon icon-dasbhoard\"\n  }), __jsx(\"span\", null, \"banners\")))), __jsx(Menu.Item, {\n    key: \"mail\"\n  }, __jsx(Link, {\n    href: \"/mail\"\n  }, __jsx(\"a\", null, __jsx(\"i\", {\n    className: \"icon icon-dasbhoard\"\n  }), __jsx(\"span\", null, \"support\")))), __jsx(Menu.Item, {\n    key: \"users\"\n  }, __jsx(Link, {\n    href: \"/users\"\n  }, __jsx(\"a\", null, __jsx(\"i\", {\n    className: \"icon icon-dasbhoard\"\n  }), __jsx(\"span\", null, \"users\")))), __jsx(Menu.Item, {\n    key: \"nfts\"\n  }, __jsx(Link, {\n    href: \"/nfts\"\n  }, __jsx(\"a\", null, __jsx(\"i\", {\n    className: \"icon icon-dasbhoard\"\n  }), __jsx(\"span\", null, \"nfts\")))), __jsx(Menu.Item, {\n    key: \"whitelist\"\n  }, __jsx(Link, {\n    href: \"/whitelist\"\n  }, __jsx(\"a\", null, __jsx(\"i\", {\n    className: \"icon icon-dasbhoard\"\n  }), __jsx(\"span\", null, \"whitelist\")))), __jsx(Menu.Item, {\n    key: \"admins\"\n  }, __jsx(Link, {\n    href: \"/admins\"\n  }, __jsx(\"a\", null, __jsx(\"i\", {\n    className: \"icon icon-dasbhoard\"\n  }), __jsx(\"span\", null, \"admins\"))))))));\n};\n\nSidebarContent.propTypes = {};\nexport default SidebarContent;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/core/Sidebar/SidebarContent.js"],"names":["React","useEffect","Menu","Link","useRouter","CustomScrollbars","SidebarLogo","UserProfile","AppsNavigation","NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR","NAV_STYLE_NO_HEADER_MINI_SIDEBAR","THEME_TYPE_LITE","useDispatch","useSelector","setPathName","SubMenu","MenuItemGroup","ItemGroup","SidebarContent","dispatch","router","navStyle","themeType","pathname","settings","getNoHeaderClass","getNavStyleSubMenuClass","selectedKeys","substr","defaultOpenKeys","split","propTypes"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {Menu} from \"antd\";\r\nimport Link from \"next/link\";\r\n\r\nimport {useRouter} from 'next/router'\r\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\r\nimport SidebarLogo from \"./SidebarLogo\";\r\nimport UserProfile from \"./UserProfile\";\r\nimport AppsNavigation from \"./AppsNavigation\";\r\nimport {\r\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  THEME_TYPE_LITE\r\n} from \"../../../constants/ThemeSetting\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setPathName} from \"../../../redux/actions\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\n\r\nconst SidebarContent = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const router = useRouter()\r\n  let {navStyle, themeType, pathname} = useSelector(({settings}) => settings);\r\n\r\n  const getNoHeaderClass = (navStyle) => {\r\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\r\n      return \"gx-no-header-notifications\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  const getNavStyleSubMenuClass = (navStyle) => {\r\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n      return \"gx-no-header-submenu-popup\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(setPathName(router.pathname))\r\n  }, [router.pathname]);\r\n\r\n  const selectedKeys = router.pathname.substr(1) || 'sample';\r\n  const defaultOpenKeys = selectedKeys.split('/')[1];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SidebarLogo/>\r\n      <div className=\"gx-sidebar-content\">\r\n        <div className={`gx-sidebar-notifications ${getNoHeaderClass(navStyle)}`}>\r\n          <UserProfile/>\r\n          <AppsNavigation/>\r\n        </div>\r\n        <CustomScrollbars className=\"gx-layout-sider-scrollbar\">\r\n          <Menu\r\n            defaultOpenKeys={[defaultOpenKeys]}\r\n            selectedKeys={[selectedKeys]}\r\n            theme={themeType === THEME_TYPE_LITE ? 'lite' : 'dark'}\r\n            mode=\"inline\">\r\n\r\n            <Menu.Item key=\"sample\">\r\n              <Link href=\"/banners\">\r\n                <a><i className=\"icon icon-dasbhoard\"/><span>banners</span></a>\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"mail\">\r\n              <Link href=\"/mail\">\r\n                <a><i className=\"icon icon-dasbhoard\"/><span>support</span></a>\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"users\">\r\n              <Link href=\"/users\">\r\n                <a><i className=\"icon icon-dasbhoard\"/><span>users</span></a>\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"nfts\">\r\n              <Link href=\"/nfts\">\r\n                <a><i className=\"icon icon-dasbhoard\"/><span>nfts</span></a>\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"whitelist\">\r\n              <Link href=\"/whitelist\">\r\n                <a><i className=\"icon icon-dasbhoard\"/><span>whitelist</span></a>\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"admins\">\r\n              <Link href=\"/admins\">\r\n                <a><i className=\"icon icon-dasbhoard\"/><span>admins</span></a>\r\n              </Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nSidebarContent.propTypes = {};\r\nexport default SidebarContent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}