{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Avatar, Input, Modal } from \"antd\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\n\nvar AddContact = /*#__PURE__*/function (_React$Component) {\n  _inherits(AddContact, _React$Component);\n\n  var _super = _createSuper(AddContact);\n\n  function AddContact(props) {\n    var _this;\n\n    _classCallCheck(this, AddContact);\n\n    _this = _super.call(this, props);\n    var _props$contact = props.contact,\n        id = _props$contact.id,\n        thumb = _props$contact.thumb,\n        name = _props$contact.name,\n        email = _props$contact.email,\n        wallet = _props$contact.wallet,\n        selected = _props$contact.selected,\n        starred = _props$contact.starred,\n        frequently = _props$contact.frequently;\n    _this.state = {\n      id: id,\n      thumb: thumb,\n      name: name,\n      email: email,\n      wallet: wallet,\n      selected: selected,\n      starred: starred,\n      frequently: frequently\n    };\n    return _this;\n  }\n\n  _createClass(AddContact, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          onSaveContact = _this$props.onSaveContact,\n          onContactClose = _this$props.onContactClose,\n          open = _this$props.open,\n          contact = _this$props.contact;\n\n      if (contact.description) {\n        var _this$state = this.state,\n            collect = _this$state.collect,\n            description = _this$state.description,\n            royalty = _this$state.royalty,\n            img = _this$state.img;\n      } else {\n        var _this$state2 = this.state,\n            _id = _this$state2._id,\n            _name = _this$state2.name,\n            _email = _this$state2.email,\n            _wallet = _this$state2.wallet;\n      }\n\n      return __jsx(Modal, {\n        title: contact.name === '' ? __jsx(IntlMessages, {\n          id: \"contact.addContact\"\n        }) : __jsx(IntlMessages, {\n          id: \"contact.saveContact\"\n        }),\n        toggle: onContactClose,\n        visible: open,\n        closable: false,\n        onOk: function onOk() {\n          if (name === '') return;\n          onContactClose();\n          onSaveContact({\n            '_id': contact._id,\n            'name': name,\n            'email': email,\n            'wallet': wallet\n          });\n\n          _this2.setState({\n            '_id': null,\n            'name': '',\n            'email': '',\n            'wallet': ''\n          });\n        },\n        onCancel: onContactClose\n      }, __jsx(\"div\", {\n        className: \"gx-modal-box-row\"\n      }, __jsx(\"div\", {\n        className: \"gx-modal-box-form-item\"\n      }, __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        required: true,\n        placeholder: \"Name\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            name: event.target.value\n          });\n        },\n        defaultValue: name,\n        margin: \"none\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        placeholder: \"Email\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            email: event.target.value\n          });\n        },\n        value: email,\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        placeholder: \"Wallet\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            wallet: event.target.value\n          });\n        },\n        value: wallet,\n        margin: \"normal\"\n      })))));\n    }\n  }]);\n\n  return AddContact;\n}(React.Component);\n\nexport default AddContact;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/components/contact/AddContact/index.js"],"names":["React","Avatar","Input","Modal","IntlMessages","AddContact","props","contact","id","thumb","name","email","wallet","selected","starred","frequently","state","onSaveContact","onContactClose","open","description","collect","royalty","img","_id","setState","event","target","value","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Avatar, Input, Modal} from \"antd\";\r\n\r\nimport IntlMessages from \"../../../../util/IntlMessages\";\r\n\r\nclass AddContact extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {id, thumb, name, email, wallet, selected, starred, frequently} = props.contact;\r\n    this.state = {\r\n      id,\r\n      thumb,\r\n      name,\r\n      email,\r\n      wallet,\r\n      selected,\r\n      starred,\r\n      frequently\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {onSaveContact, onContactClose, open, contact} = this.props;\r\n    if (contact.description){\r\n      const {collect, description, royalty, img} = this.state\r\n    } else{\r\n      const {_id, name, email, wallet} = this.state;\r\n    }\r\n    \r\n    return (\r\n      <Modal\r\n        title={contact.name === '' ?\r\n          <IntlMessages id=\"contact.addContact\"/> :\r\n          <IntlMessages id=\"contact.saveContact\"/>}\r\n        toggle={onContactClose} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onContactClose();\r\n          onSaveContact(\r\n            {\r\n              '_id': contact._id,\r\n              'name': name,\r\n              'email': email,\r\n              'wallet': wallet,\r\n            });\r\n          this.setState({\r\n            '_id': null,\r\n            'name': '',\r\n            'email': '',\r\n            'wallet': '',\r\n          })\r\n\r\n        }}\r\n        onCancel={onContactClose}>\r\n\r\n        <div className=\"gx-modal-box-row\">\r\n\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n              <Input\r\n                required\r\n                placeholder=\"Name\"\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                defaultValue={name}\r\n                margin=\"none\"/>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n              <Input\r\n                placeholder=\"Email\"\r\n                onChange={(event) => this.setState({email: event.target.value})}\r\n                value={email}\r\n                margin=\"normal\"/>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n              <Input\r\n                placeholder=\"Wallet\"\r\n                onChange={(event) => this.setState({wallet: event.target.value})}\r\n                value={wallet}\r\n                margin=\"normal\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n"]},"metadata":{},"sourceType":"module"}