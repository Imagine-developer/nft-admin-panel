{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport contactList from '../Contact/data/contactList';\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport TokenDetails from '../../app/components/mail/TokenDetail';\nimport TokenList from '../../app/components/mail/TokenList';\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport AddToken from '../../app/components/contact/AddToken';\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios';\nimport './index.css';\nlet contactId = 723812738;\n\nclass Contact extends Component {\n  async componentWillMount() {\n    const res = await axios.get('http://localhost:8000/nft');\n    console.log(res.data);\n    this.setState({\n      contactList: res.data,\n      allContact: res.data\n    });\n  }\n\n  onMailSelect(mail) {\n    this.setState({\n      loader: true,\n      currentMail: mail\n    });\n    setTimeout(() => {\n      this.setState({\n        loader: false\n      });\n    }, 1500);\n  }\n\n  constructor() {\n    super();\n\n    _defineProperty(this, \"ContactSideBar\", user => {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"span\", null, __jsx(IntlMessages, {\n        id: \"chat.contacts\"\n      })))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New NFT\"))))));\n    });\n\n    _defineProperty(this, \"onAddContact\", () => {\n      this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(this, \"onContactClose\", () => {\n      this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(this, \"onSaveContact\", async data => {\n      if (data.description) {\n        const result = await axios.post('http://localhost:8000');\n      }\n\n      const result = await axios.post('http://localhost:8000/user/register', data);\n      this.setState({\n        contactList: [...this.state.contactList, result.data],\n        alertMessage: 'Users Updated Successfully',\n        showMessage: true,\n        allContact: [...this.state.contactList, result.data]\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n    });\n\n    _defineProperty(this, \"onDeleteContact\", async data => {\n      const res = await axios.delete('http://localhost:8000/user/' + data._id);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: this.state.allContact.filter(contact => contact._id !== data._id),\n        contactList: this.state.allContact.filter(contact => contact._id !== data._id)\n      });\n    });\n\n    _defineProperty(this, \"onDeleteSelectedContact\", () => {\n      const contacts = this.state.allContact.filter(contact => !contact.selected);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    });\n\n    _defineProperty(this, \"filterContact\", userName => {\n      const {\n        filterOption\n      } = this.state;\n\n      if (userName === '') {\n        this.setState({\n          contactList: this.state.allContact\n        });\n      } else {\n        const filterContact = this.state.allContact.filter(contact => contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n\n        if (filterOption === 'All contacts') {\n          this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.frequently)\n          });\n        } else if (filterOption === 'Starred contacts') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.starred)\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        showMessage: false\n      });\n    });\n\n    _defineProperty(this, \"getAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: true\n      }) : contact);\n      this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(this, \"getUnselectedAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: false\n      }) : contact);\n      this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    this.state = {\n      currentMail: null,\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value\n    });\n    this.filterContact(evt.target.value);\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      user,\n      currentMail,\n      contactList,\n      addContactState,\n      drawerState,\n      selectedContacts,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage\n    } = this.state;\n    console.log(contactList);\n    return __jsx(\"div\", {\n      className: \"gx-main-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-app-module\"\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\"\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this)\n    }, this.ContactSideBar())), __jsx(\"div\", {\n      className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n    }, this.ContactSideBar(user)), __jsx(\"div\", {\n      className: \"gx-module-box\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-header\"\n    }, __jsx(\"span\", {\n      className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-menu gx-icon-btn\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this)\n    })), __jsx(AppModuleHeader, {\n      placeholder: \"Search contact\",\n      notification: false,\n      apps: false,\n      user: this.state.user,\n      onChange: this.updateContactUser.bind(this),\n      value: this.state.searchUser\n    })), __jsx(\"div\", {\n      className: \"gx-module-box-content\"\n    }, __jsx(CustomScrollbars, {\n      className: \"gx-module-content-scroll\"\n    }, currentMail === null ? [contactList.length === 0 ? __jsx(\"div\", {\n      className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\"\n    }, noContentFoundMessage) : __jsx(TokenList, {\n      contactList: contactList,\n      onMailSelect: this.onMailSelect.bind(this),\n      onDeleteMail: this.onDeleteContact.bind(this),\n      onSaveContact: this.onSaveContact.bind(this)\n    })] : __jsx(TokenDetails, {\n      mail: currentMail\n    }))))), __jsx(AddToken, {\n      open: addContactState,\n      contact: {\n        'collect': '',\n        'img': '',\n        'royalty': '',\n        'description': ''\n      },\n      onSaveContact: this.onSaveContact,\n      onContactClose: this.onContactClose,\n      onDeleteContact: this.onDeleteContact\n    }), showMessage && message.info(__jsx(\"span\", {\n      id: \"message-id\"\n    }, alertMessage), 3, this.handleRequestClose));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Tokens/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","TokenDetails","TokenList","AppModuleHeader","AddContact","AddToken","IntlMessages","axios","contactId","Contact","componentWillMount","res","get","console","log","data","setState","allContact","onMailSelect","mail","loader","currentMail","setTimeout","constructor","user","onAddContact","addContactState","description","result","post","state","alertMessage","showMessage","delete","_id","filter","contact","contacts","selected","selectedContacts","userName","filterOption","filterContact","name","toLowerCase","indexOf","frequently","starred","map","length","noContentFoundMessage","selectedSectionId","drawerState","email","avatar","searchUser","selectedContact","onAllContactSelect","selectAll","getAllContact","getUnselectedAllContact","updateContactUser","evt","target","value","onToggleDrawer","render","bind","ContactSideBar","onDeleteContact","onSaveContact","onContactClose","info","handleRequestClose"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Checkbox, Drawer, message} from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\n\nimport contactList from '../Contact/data/contactList'\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport TokenDetails from '../../app/components/mail/TokenDetail'\nimport TokenList from '../../app/components/mail/TokenList'\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport AddToken from '../../app/components/contact/AddToken'\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios'\nimport './index.css';\n\nlet contactId = 723812738;\n\nclass Contact extends Component {\n  async componentWillMount(){\n    const res = await axios.get('http://localhost:8000/nft')\n    console.log(res.data)\n    this.setState({contactList: res.data, allContact: res.data})\n  }\n\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New NFT</span>\n            </Button>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  onMailSelect(mail) {\n    this.setState({\n      loader: true,\n      currentMail: mail,\n    });\n    setTimeout(() => {\n      this.setState({loader: false});\n    }, 1500);\n  }\n\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onSaveContact = async (data) => {\n    if (data.description){\n      const result = await axios.post('http://localhost:8000')\n    }\n      const result = await axios.post('http://localhost:8000/user/register', data)\n      this.setState({contactList: [...this.state.contactList, result.data],\n        alertMessage: 'Users Updated Successfully',\n        showMessage: true,\n      allContact: [...this.state.contactList, result.data]})\n\n\n    // this.onFilterOptionSelect(this.state.filterOption);\n  };\n  onDeleteContact = async (data) => {\n    const res = await axios.delete('http://localhost:8000/user/' + data._id)\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: this.state.allContact.filter((contact) => contact._id !== data._id),\n      contactList: this.state.allContact.filter((contact) => contact._id !== data._id)\n    })\n  };\n  onDeleteSelectedContact = () => {\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: contacts,\n      contactList: contacts,\n      selectedContacts: 0\n    })\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = this.state.allContact.filter((contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n  getAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: true\n    } : contact);\n    this.setState({\n      selectedContacts: contactList.length,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n  getUnselectedAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: false\n    } : contact);\n    this.setState({\n      selectedContacts: 0,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      currentMail: null,\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false,\n    }\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, currentMail, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    console.log(contactList)\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n           <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div> \n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n\n                {currentMail === null ? [\n                  contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <TokenList contactList={contactList}\n                  onMailSelect={this.onMailSelect.bind(this)}\n                  onDeleteMail={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>]\n                                 :\n                                 <TokenDetails mail={currentMail}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddToken open={addContactState} contact={{\n          'collect': '',\n          'img': '',\n          'royalty': '',\n          'description': '',\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}