{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from \"react\";\nimport { Button, Checkbox, Drawer, Dropdown, Menu, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport axios from 'axios';\nimport mails from \"./data/mails\";\nimport folders from \"./data/folders\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport MailList from \"../../app/components/mail/MailList\";\nimport ComposeMail from \"../../app/components/mail/Compose\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport MailDetail from \"../../app/components/mail/MailDetail\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport CircularProgress from \"../../app/components/CircularProgress\";\nimport './index.css';\nimport AddMail from \"../../app/components/mail/addMail\";\n\nvar Mail = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Mail, _PureComponent);\n\n  var _super = _createSuper(Mail);\n\n  function Mail() {\n    var _this;\n\n    _classCallCheck(this, Mail);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"MailSideBar\", function (mail) {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, \"            \", __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: _this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New Banner\"))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddContact\", function () {\n      _this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactClose\", function () {\n      _this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteMail\", function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.selected && mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          folder: 4,\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        alertMessage: 'Mail Deleted Successfully',\n        showMessage: true,\n        selectedMails: 0,\n        allMail: mails,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNavFolders\", function () {\n      return folders.map(function (folder, index) {\n        return __jsx(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              return mail.folder === folder.id;\n            });\n\n            _this.setState({\n              selectedFolder: folder.id,\n              noContentFoundMessage: 'No Mail found in selected folder',\n              currentMail: null,\n              loader: true,\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          }\n        }, __jsx(\"span\", {\n          className: \"\".concat(_this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link')\n        }, __jsx(\"i\", {\n          className: \"icon icon-\".concat(folder.icon)\n        }), __jsx(\"span\", null, folder.title)));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFolderMenuItemSelect\", function (e) {\n      var id = +e.key;\n\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.selected && mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          folder: id,\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        noContentFoundMessage: 'No Mail found in selected folder',\n        alertMessage: 'Mail has been moved successfully',\n        showMessage: true,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLabelMenuItemSelect\", function (e) {\n      var id = +e.key;\n\n      var mails = _this.state.allMail.map(function (mail) {\n        if (mail.selected && mail.folder === _this.state.selectedFolder) {\n          if (mail.labels.includes(id)) {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: _this.removeLabel(mail, id)\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: _this.addLabel(mail, id)\n            });\n          }\n        } else {\n          return mail;\n        }\n      });\n\n      _this.setState({\n        noContentFoundMessage: 'No Mail found in selected label',\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allMail: mails,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRequestClose\", function () {\n      _this.setState({\n        composeMail: false,\n        showMessage: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNavFilters\", function () {\n      return filters.map(function (filter, index) {\n        return __jsx(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              if (filter.id === 0 && mail.starred && mail.folder === _this.state.selectedFolder) {\n                return mail;\n              } else if (filter.id === 1 && mail.important && mail.folder === _this.state.selectedFolder) {\n                return mail;\n              }\n\n              return null;\n            });\n\n            _this.setState({\n              noContentFoundMessage: 'No Mail found in selected filter',\n              loader: true,\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          }\n        }, __jsx(\"span\", {\n          className: \"gx-link\"\n        }, __jsx(\"i\", {\n          className: \"icon icon-\".concat(filter.icon)\n        }), __jsx(\"span\", null, filter.title)));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOptionMenuItemSelect\", function (e) {\n      switch (e.key) {\n        case 'All':\n          _this.handleRequestClose();\n\n          _this.getAllMail();\n\n          break;\n\n        case 'None':\n          _this.handleRequestClose();\n\n          _this.getUnselectedAllMail();\n\n          break;\n\n        case 'Read':\n          _this.handleRequestClose();\n\n          _this.getReadMail();\n\n          break;\n\n        case 'Unread':\n          _this.handleRequestClose();\n\n          _this.getUnreadMail();\n\n          break;\n\n        case 'Starred':\n          _this.handleRequestClose();\n\n          _this.getStarredMail();\n\n          break;\n\n        case 'Unstarred':\n          _this.handleRequestClose();\n\n          _this.getUnStarredMail();\n\n          break;\n\n        case 'Important':\n          _this.handleRequestClose();\n\n          _this.getImportantMail();\n\n          break;\n\n        case 'Unimportant':\n          _this.handleRequestClose();\n\n          _this.getUnimportantMail();\n\n          break;\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteContact\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios[\"delete\"]('https://desolate-inlet-76011.herokuapp.com/banner/' + data._id);\n\n              case 2:\n                res = _context.sent;\n                console.log(res.data);\n\n                _this.render();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"getAllMail\", function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          selected: true\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: mails.length,\n        allMail: mails,\n        optionName: 'All',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnselectedAllMail\", function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.folder === _this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        optionName: 'None',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getReadMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Read',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnreadMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unread',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getStarredMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Starred',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnStarredMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'UnStarred',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getImportantMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Important',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnimportantMail\", function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unimportant',\n        noContentFoundMessage: 'No Mail found in selected Label',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNavLabels\", function () {\n      return labels.map(function (label, index) {\n        return __jsx(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              return mail.labels.includes(label.id) && mail.folder === _this.state.selectedFolder;\n            });\n\n            _this.setState({\n              loader: true,\n              noContentFoundMessage: 'No Mail found in selected label',\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          }\n        }, __jsx(\"span\", {\n          className: \"gx-link\"\n        }, __jsx(\"i\", {\n          className: \"icon icon-tag gx-text-\".concat(label.color)\n        }), __jsx(\"span\", null, label.title)));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"searchMail\", function (searchText) {\n      if (searchText === '') {\n        _this.setState({\n          folderMails: _this.state.allMail.filter(function (mail) {\n            return !mail.deleted;\n          })\n        });\n      } else {\n        var searchMails = _this.state.allMail.filter(function (mail) {\n          return mail.title.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\n        });\n\n        _this.setState({\n          folderMails: searchMails\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"displayMail\", function (currentMail, folderMails, noContentFoundMessage) {\n      return __jsx(\"div\", {\n        className: \"gx-module-box-column\"\n      }, currentMail === null ? folderMails.length === 0 ? __jsx(\"div\", {\n        className: \"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\"\n      }, noContentFoundMessage) : __jsx(MailList, {\n        mails: folderMails,\n        onStartSelect: _this.onStartSelect.bind(_assertThisInitialized(_this)),\n        onMailSelect: _this.onMailSelect.bind(_assertThisInitialized(_this)),\n        onMailChecked: _this.onMailChecked.bind(_assertThisInitialized(_this)),\n        onDeleteMail: _this.onDeleteMail.bind(_assertThisInitialized(_this))\n      }) : __jsx(MailDetail, {\n        mail: currentMail,\n        onStartSelect: _this.onStartSelect.bind(_assertThisInitialized(_this)),\n        onImportantSelect: _this.onImportantSelect.bind(_assertThisInitialized(_this))\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMailActions\", function () {\n      return __jsx(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\"\n      }, __jsx(Dropdown, {\n        overlay: _this.folderMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"i\", {\n        className: \"icon icon-folder gx-icon-btn\"\n      })), __jsx(Dropdown, {\n        overlay: _this.labelMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"i\", {\n        className: \"icon icon-tag gx-icon-btn\"\n      })), __jsx(\"span\", {\n        onClick: _this.onDeleteMail.bind(_assertThisInitialized(_this))\n      }, __jsx(\"i\", {\n        className: \"icon icon-trash gx-icon-btn\"\n      })));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"optionMenu\", function () {\n      return __jsx(Menu, {\n        id: \"option-menu\",\n        onClick: _this.onOptionMenuItemSelect.bind(_assertThisInitialized(_this))\n      }, options.map(function (option) {\n        return __jsx(Menu.Item, {\n          key: option.title\n        }, option.title);\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"folderMenu\", function () {\n      return __jsx(Menu, {\n        id: \"folder-menu\",\n        onClick: _this.onFolderMenuItemSelect.bind(_assertThisInitialized(_this))\n      }, folders.map(function (folder) {\n        return __jsx(Menu.Item, {\n          key: folder.id\n        }, folder.title);\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"labelMenu\", function () {\n      return __jsx(Menu, {\n        id: \"label-menu\",\n        onClick: _this.onLabelMenuItemSelect.bind(_assertThisInitialized(_this))\n      }, labels.map(function (label) {\n        return __jsx(Menu.Item, {\n          key: label.id\n        }, label.title);\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveContact\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        var formData, res, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                formData = new FormData();\n                formData.append('file', data.imgUrl);\n                console.log(formData, data.imgUrl);\n                _context2.next = 5;\n                return axios.post('https://desolate-inlet-76011.herokuapp.com/banner/upload', formData);\n\n              case 5:\n                res = _context2.sent;\n                _context2.next = 8;\n                return axios.post('https://desolate-inlet-76011.herokuapp.com/banner', {\n                  title: data.title,\n                  text: data.text,\n                  url: data.url,\n                  imgUrl: res.data.img\n                });\n\n              case 8:\n                result = _context2.sent;\n                console.log(result.data);\n                window.location.reload();\n                /*     const result = await axios.post('http://localhost:8000/banner', data)\r\n                    this.setState({onAddContact: false, folderMails: [...this.folderMails, result]}) */\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      searchMail: '',\n      addContactState: false,\n      noContentFoundMessage: 'No Mail found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allMail: mails,\n      loader: true,\n      currentMail: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      selectedMails: 0,\n      selectedFolder: 0,\n      composeMail: false,\n      folderMails: mails.filter(function (mail) {\n        return mail.folder === 0;\n      })\n    };\n    return _this;\n  }\n\n  _createClass(Mail, [{\n    key: \"onDeleteMail\",\n    value: function () {\n      var _onDeleteMail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log(data);\n                _context3.next = 3;\n                return axios[\"delete\"]('https://desolate-inlet-76011.herokuapp.com/banner/' + data._id);\n\n              case 3:\n                res = _context3.sent;\n                console.log(res.data);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function onDeleteMail(_x3) {\n        return _onDeleteMail.apply(this, arguments);\n      }\n\n      return onDeleteMail;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.get('https://desolate-inlet-76011.herokuapp.com/banner');\n\n              case 2:\n                result = _context4.sent;\n                console.log(result.data);\n                this.setState({\n                  loader: false,\n                  folderMails: result.data,\n                  allMail: result.data\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"onMailChecked\",\n    value: function onMailChecked(data) {\n      data.selected = !data.selected;\n      var selectedMail = 0;\n      var mails = this.state.folderMails.map(function (mail) {\n        if (mail.selected) {\n          selectedMail++;\n        }\n\n        if (mail.id === data.id) {\n          if (mail.selected) {\n            selectedMail++;\n          }\n\n          return data;\n        } else {\n          return mail;\n        }\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        folderMails: mails\n      });\n    }\n  }, {\n    key: \"onAllMailSelect\",\n    value: function onAllMailSelect() {\n      var selectAll = this.state.selectedMails <= this.state.folderMails.length;\n\n      if (selectAll) {\n        this.getAllMail();\n      } else {\n        this.getUnselectedAllMail();\n      }\n    }\n  }, {\n    key: \"removeLabel\",\n    value: function removeLabel(mail, label) {\n      mail.labels.splice(mail.labels.indexOf(label), 1);\n\n      if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n        this.setState({\n          currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n            labels: mail.labels\n          })\n        });\n      }\n\n      return mail.labels;\n    }\n  }, {\n    key: \"onStartSelect\",\n    value: function onStartSelect(data) {\n      data.starred = !data.starred;\n      this.setState({\n        alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n        showMessage: true,\n        folderMails: this.state.folderMails.map(function (mail) {\n          return mail.id === data.id ? data : mail;\n        })\n      });\n    }\n  }, {\n    key: \"onImportantSelect\",\n    value: function onImportantSelect(data) {\n      data.important = !data.important;\n      this.setState({\n        alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n        showMessage: true,\n        folderMails: this.state.folderMails.map(function (mail) {\n          return mail.id === data.id ? data : mail;\n        })\n      });\n    }\n  }, {\n    key: \"onMailSend\",\n    value: function onMailSend(data) {\n      this.setState({\n        alertMessage: 'Mail Sent Successfully',\n        showMessage: true,\n        folderMails: this.state.allMail.concat(data),\n        allMail: this.state.allMail.concat(data)\n      });\n    }\n  }, {\n    key: \"onMailSelect\",\n    value: function onMailSelect(mail) {\n      var _this2 = this;\n\n      this.setState({\n        loader: true,\n        currentMail: mail\n      });\n      setTimeout(function () {\n        _this2.setState({\n          loader: false\n        });\n      }, 1500);\n    }\n  }, {\n    key: \"addLabel\",\n    value: function addLabel(mail, label) {\n      if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n        this.setState({\n          currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n            labels: mail.labels.concat(label)\n          })\n        });\n      }\n\n      return mail.labels.concat(label);\n    }\n  }, {\n    key: \"updateSearch\",\n    value: function updateSearch(evt) {\n      this.setState({\n        searchMail: evt.target.value\n      });\n      this.searchMail(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          selectedMails = _this$state.selectedMails,\n          loader = _this$state.loader,\n          currentMail = _this$state.currentMail,\n          drawerState = _this$state.drawerState,\n          folderMails = _this$state.folderMails,\n          composeMail = _this$state.composeMail,\n          user = _this$state.user,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage,\n          addContactState = _this$state.addContactState;\n      return __jsx(\"div\", {\n        className: \"gx-main-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-app-module\"\n      }, __jsx(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\"\n      }, __jsx(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this)\n      })), __jsx(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n      }, this.MailSideBar(currentMail)), __jsx(\"div\", {\n        className: \"gx-module-box\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-header\"\n      }, __jsx(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this)\n      })), __jsx(AppModuleHeader, {\n        placeholder: \"Search mails\",\n        user: this.state.user,\n        onChange: this.updateSearch.bind(this),\n        value: this.state.searchMail\n      })), __jsx(\"div\", {\n        className: \"gx-module-box-content\"\n      }, loader ? __jsx(\"div\", {\n        className: \"gx-loader-view\"\n      }, __jsx(CircularProgress, null)) : this.displayMail(currentMail, folderMails, noContentFoundMessage), __jsx(ComposeMail, {\n        open: composeMail,\n        user: user,\n        onClose: this.handleRequestClose.bind(this),\n        onMailSend: this.onMailSend.bind(this)\n      })))), __jsx(AddMail, {\n        open: addContactState,\n        onSaveContact: this.onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact\n      }), showMessage && message.info(__jsx(\"span\", {\n        id: \"message-id\"\n      }, alertMessage), 3, this.handleRequestClose));\n    }\n  }]);\n\n  return Mail;\n}(PureComponent);\n\nexport default Mail;","map":null,"metadata":{},"sourceType":"module"}