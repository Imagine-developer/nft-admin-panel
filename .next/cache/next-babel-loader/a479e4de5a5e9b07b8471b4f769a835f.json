{"ast":null,"code":"var _jsxFileName = \"/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/components/mail/addMail/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Avatar, Input, Modal } from \"antd\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\nclass AddMail extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSelectFile\", e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    });\n\n    _defineProperty(this, \"onImageLoaded\", image => {\n      this.imageRef = image;\n    });\n\n    _defineProperty(this, \"onCropComplete\", crop => {\n      this.makeClientCrop(crop);\n    });\n\n    _defineProperty(this, \"onCropChange\", (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    });\n\n    this.state = {\n      title: '',\n      subtitle: '',\n      text: '',\n      imgUrl: '',\n      url: '',\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg', 1);\n    });\n  }\n\n  render() {\n    const {\n      onSaveContact,\n      onContactClose,\n      open,\n      currentMail\n    } = this.props;\n    const {\n      title,\n      text,\n      imgUrl,\n      url,\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return __jsx(Modal, {\n      title: __jsx(IntlMessages, {\n        id: \"contact.addContact\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }),\n      toggle: onContactClose,\n      visible: open,\n      closable: false,\n      onOk: () => {\n        if (title === '') return;\n        onContactClose();\n        onSaveContact({\n          'title': title,\n          'text': text,\n          'url': url,\n          'imgUrl': imgUrl\n        });\n        this.setState({\n          title: '',\n          text: '',\n          imgUrl: '',\n          url: ''\n        });\n      },\n      onCancel: onContactClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-modal-box-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-modal-box-form-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, __jsx(Input, {\n      required: true,\n      placeholder: \"title\",\n      onChange: event => this.setState({\n        title: event.target.value\n      }),\n      defaultValue: title,\n      margin: \"none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"gx-form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, __jsx(Input, {\n      placeholder: \"text\",\n      onChange: event => this.setState({\n        text: event.target.value\n      }),\n      value: text,\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"gx-form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, __jsx(TextArea, {\n      placeholder: \"url\",\n      onChange: event => this.setState({\n        url: event.target.value\n      }),\n      value: url,\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, __jsx(Input, {\n      type: \"file\",\n      onChange: event => this.setState({\n        imgUrl: event.target.files[0]\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default AddMail;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/components/mail/addMail/index.js"],"names":["React","Avatar","Input","Modal","IntlMessages","TextArea","AddMail","Component","constructor","props","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","image","imageRef","crop","makeClientCrop","percentCrop","state","title","subtitle","text","imgUrl","url","unit","width","aspect","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","URL","revokeObjectURL","fileUrl","createObjectURL","render","onSaveContact","onContactClose","open","currentMail","event","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Avatar, Input, Modal} from \"antd\";\n\nimport IntlMessages from \"../../../../util/IntlMessages\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\nclass AddMail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      subtitle: '',\n      text: '',\n      imgUrl: '',\n      url: '',\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    }\n  }\n  onSelectFile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n  onImageLoaded = (image) => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = (crop) => {\n    this.makeClientCrop(crop);\n  };\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          if (!blob) {\n            //reject(new Error('Canvas is empty'));\n            console.error('Canvas is empty');\n            return;\n          }\n          blob.name = fileName;\n          window.URL.revokeObjectURL(this.fileUrl);\n          this.fileUrl = window.URL.createObjectURL(blob);\n          resolve(this.fileUrl);\n        },\n        'image/jpeg',\n        1\n      );\n    });\n  }\n  \n\n  render() {\n    const {onSaveContact, onContactClose, open, currentMail} = this.props;\n    const {title, text, imgUrl, url, crop, croppedImageUrl, src} = this.state;\n    return (\n      <Modal\n        title={\n          <IntlMessages id=\"contact.addContact\"/>}\n        toggle={onContactClose} visible={open}\n        closable={false}\n        onOk={() => {\n            if (title === '') return;\n          onContactClose();\n          onSaveContact({\n              'title': title,\n              'text': text,\n              'url': url,\n              'imgUrl': imgUrl\n          });\n          this.setState({\n              title: '',\n              text: '',\n              imgUrl: '',\n              url: ''\n          })\n\n        }}\n        onCancel={onContactClose}>\n\n        <div className=\"gx-modal-box-row\">\n\n          <div className=\"gx-modal-box-form-item\">\n            <div className=\"gx-form-group\">\n              <Input\n                required\n                placeholder=\"title\"\n                onChange={(event) => this.setState({title: event.target.value})}\n                defaultValue={title}\n                margin=\"none\"/>\n            </div>\n            <div className=\"gx-form-group\">\n              <Input\n                placeholder=\"text\"\n                onChange={(event) => this.setState({text: event.target.value})}\n                value={text}\n                margin=\"normal\"\n              />\n            </div>\n            <div className=\"gx-form-group\">\n              <TextArea\n                placeholder=\"url\"\n                onChange={(event) => this.setState({url: event.target.value})}\n                value={url}\n                margin=\"normal\"\n              />\n            </div>\n            <div>\n              <Input\n                type='file'\n                onChange={(event) => this.setState({imgUrl: event.target.files[0]})}\n              />\n            </div>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default AddMail;\n"]},"metadata":{},"sourceType":"module"}