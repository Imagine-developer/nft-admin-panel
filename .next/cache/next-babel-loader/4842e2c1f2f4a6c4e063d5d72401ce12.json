{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport contactList from \"./data/contactList\";\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport './index.css';\nvar contactId = 723812738;\nvar filterOptions = [{\n  id: 1,\n  name: 'All contacts',\n  icon: 'all-contacts'\n}, {\n  id: 2,\n  name: 'Frequently contacted',\n  icon: 'frequent'\n}, {\n  id: 3,\n  name: 'Starred contacts',\n  icon: 'star'\n}];\n\nvar Contact = /*#__PURE__*/function (_Component) {\n  _inherits(Contact, _Component);\n\n  var _super = _createSuper(Contact);\n\n  function Contact() {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"ContactSideBar\", function (user) {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-contacts gx-mr-4\"\n      }), __jsx(\"span\", null, __jsx(IntlMessages, {\n        id: \"chat.contacts\"\n      })))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: _this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New Contact\"))), __jsx(\"div\", {\n        className: \"gx-module-side-nav\"\n      }, __jsx(\"ul\", {\n        className: \"gx-module-nav\"\n      }, filterOptions.map(function (option) {\n        return __jsx(\"li\", {\n          key: option.id,\n          className: \"gx-nav-item\"\n        }, __jsx(\"span\", {\n          className: \"gx-link \".concat(option.id === _this.state.selectedSectionId ? 'active' : ''),\n          onClick: _this.onFilterOptionSelect.bind(_assertThisInitialized(_this), option)\n        }, __jsx(\"i\", {\n          className: \"icon icon-\".concat(option.icon)\n        }), __jsx(\"span\", null, option.name)));\n      }))))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactSelect\", function (data) {\n      data.selected = !data.selected;\n      var selectedContacts = 0;\n\n      var contactList = _this.state.contactList.map(function (contact) {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      _this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddContact\", function () {\n      _this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactClose\", function () {\n      _this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterOptionSelect\", function (option) {\n      switch (option.name) {\n        case 'All contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact\n            });\n\n            break;\n          }\n\n        case 'Frequently contacted':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.frequently;\n              })\n            });\n\n            break;\n          }\n\n        case 'Starred contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.starred;\n              })\n            });\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSaveContact\", function (data) {\n      var isNew = true;\n\n      var contactList = _this.state.allContact.map(function (contact) {\n        if (contact.id === data.id) {\n          isNew = false;\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      if (isNew) {\n        contactList.push(data);\n      }\n\n      _this.setState({\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n        showMessage: true,\n        contactList: contactList,\n        allContact: contactList\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteContact\", function (data) {\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        }),\n        contactList: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        })\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteSelectedContact\", function () {\n      var contacts = _this.state.allContact.filter(function (contact) {\n        return !contact.selected;\n      });\n\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterContact\", function (userName) {\n      var filterOption = _this.state.filterOption;\n\n      if (userName === '') {\n        _this.setState({\n          contactList: _this.state.allContact\n        });\n      } else {\n        var filterContact = _this.state.allContact.filter(function (contact) {\n          return contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1;\n        });\n\n        if (filterOption === 'All contacts') {\n          _this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.frequently;\n            })\n          });\n        } else if (filterOption === 'Starred contacts') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.starred;\n            })\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRequestClose\", function () {\n      _this.setState({\n        showMessage: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAllContact\", function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread(_objectSpread({}, contact), {}, {\n          selected: true\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getUnselectedAllContact\", function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread(_objectSpread({}, contact), {}, {\n          selected: false\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"onAllContactSelect\",\n    value: function onAllContactSelect() {\n      var selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n      if (selectAll) {\n        this.getAllContact();\n      } else {\n        this.getUnselectedAllContact();\n      }\n    }\n  }, {\n    key: \"updateContactUser\",\n    value: function updateContactUser(evt) {\n      this.setState({\n        searchUser: evt.target.value\n      });\n      this.filterContact(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          contactList = _this$state.contactList,\n          addContactState = _this$state.addContactState,\n          drawerState = _this$state.drawerState,\n          selectedContacts = _this$state.selectedContacts,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      return __jsx(\"div\", {\n        className: \"gx-main-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-app-module\"\n      }, __jsx(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\"\n      }, __jsx(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this)\n      }, this.ContactSideBar())), __jsx(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n      }, this.ContactSideBar(user)), __jsx(\"div\", {\n        className: \"gx-module-box\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-header\"\n      }, __jsx(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this)\n      })), __jsx(AppModuleHeader, {\n        placeholder: \"Search contact\",\n        notification: false,\n        apps: false,\n        user: this.state.user,\n        onChange: this.updateContactUser.bind(this),\n        value: this.state.searchUser\n      })), __jsx(\"div\", {\n        className: \"gx-module-box-content\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-box-topbar\"\n      }, __jsx(Checkbox, {\n        color: \"primary\",\n        className: \"gx-icon-btn\",\n        indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n        checked: selectedContacts > 0,\n        onChange: this.onAllContactSelect.bind(this),\n        value: \"SelectMail\"\n      }), selectedContacts > 0 && __jsx(\"i\", {\n        className: \"gx-icon-btn icon icon-trash\",\n        onClick: this.onDeleteSelectedContact.bind(this)\n      })), __jsx(CustomScrollbars, {\n        className: \"gx-module-content-scroll\"\n      }, contactList.length === 0 ? __jsx(\"div\", {\n        className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\"\n      }, noContentFoundMessage) : __jsx(ContactList, {\n        contactList: contactList,\n        onContactSelect: this.onContactSelect.bind(this),\n        onDeleteContact: this.onDeleteContact.bind(this),\n        onSaveContact: this.onSaveContact.bind(this)\n      }))))), __jsx(AddContact, {\n        open: addContactState,\n        contact: {\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false\n        },\n        onSaveContact: this.onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact\n      }), showMessage && message.info(__jsx(\"span\", {\n        id: \"message-id\"\n      }, alertMessage), 3, this.handleRequestClose));\n    }\n  }]);\n\n  return Contact;\n}(Component);\n\nexport default Contact;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Contact/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","contactId","filterOptions","id","name","icon","Contact","user","onAddContact","map","option","state","selectedSectionId","onFilterOptionSelect","bind","data","selected","selectedContacts","contact","setState","addContactState","filterOption","allContact","filter","frequently","starred","isNew","push","alertMessage","showMessage","contacts","userName","filterContact","toLowerCase","indexOf","length","noContentFoundMessage","drawerState","email","avatar","searchUser","selectedContact","selectAll","getAllContact","getUnselectedAllContact","evt","target","value","onToggleDrawer","ContactSideBar","updateContactUser","onAllContactSelect","onDeleteSelectedContact","onContactSelect","onDeleteContact","onSaveContact","onContactClose","info","handleRequestClose"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Checkbox, Drawer, message} from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\n\nimport contactList from \"./data/contactList\";\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport './index.css';\n\nlet contactId = 723812738;\n\nconst filterOptions = [\n  {\n    id: 1,\n    name: 'All contacts',\n    icon: 'all-contacts'\n  }, {\n    id: 2,\n    name: 'Frequently contacted',\n    icon: 'frequent'\n\n  }, {\n\n    id: 3,\n    name: 'Starred contacts',\n    icon: 'star'\n  }\n];\n\nclass Contact extends Component {\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <i className=\"icon icon-contacts gx-mr-4\"/>\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New Contact</span>\n            </Button>\n          </div>\n          <div className=\"gx-module-side-nav\">\n            <ul className=\"gx-module-nav\">\n              {filterOptions.map(option => <li key={option.id} className=\"gx-nav-item\">\n                  <span\n                    className={`gx-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\n                    this.onFilterOptionSelect.bind(this, option)\n                  }>\n                    <i className={`icon icon-${option.icon}`}/>\n                    <span>{option.name}</span>\n                  </span>\n                </li>\n              )}\n\n            </ul>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  onContactSelect = (data) => {\n    data.selected = !data.selected;\n    let selectedContacts = 0;\n    const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n          return data;\n        } else {\n          return contact;\n        }\n      }\n    );\n    this.setState({\n      selectedContacts: selectedContacts,\n      contactList: contactList\n    });\n\n  };\n\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onFilterOptionSelect = (option) => {\n    switch (option.name) {\n      case 'All contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact\n        });\n        break;\n      }\n      case 'Frequently contacted': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\n        });\n        break;\n      }\n      case 'Starred contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact.filter((contact) => contact.starred)\n        });\n        break;\n      }\n      default:\n        break;\n    }\n\n  };\n  onSaveContact = (data) => {\n    let isNew = true;\n    const contactList = this.state.allContact.map((contact) => {\n      if (contact.id === data.id) {\n        isNew = false;\n        return data\n      } else {\n        return contact\n      }\n    });\n    if (isNew) {\n      contactList.push(data);\n    }\n    this.setState({\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n      showMessage: true,\n      contactList: contactList,\n      allContact: contactList\n    });\n    // this.onFilterOptionSelect(this.state.filterOption);\n  };\n  onDeleteContact = (data) => {\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\n    })\n  };\n  onDeleteSelectedContact = () => {\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: contacts,\n      contactList: contacts,\n      selectedContacts: 0\n    })\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = this.state.allContact.filter((contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n  getAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: true\n    } : contact);\n    this.setState({\n      selectedContacts: contactList.length,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n  getUnselectedAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: false\n    } : contact);\n    this.setState({\n      selectedContacts: 0,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false,\n    }\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n           <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div> \n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <div className=\"gx-module-box-topbar\">\n                <Checkbox color=\"primary\" className=\"gx-icon-btn\"\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\n                          checked={selectedContacts > 0}\n                          onChange={this.onAllContactSelect.bind(this)}\n                          value=\"SelectMail\"/>\n\n\n                {selectedContacts > 0 &&\n                <i className=\"gx-icon-btn icon icon-trash\" onClick={this.onDeleteSelectedContact.bind(this)}/>}\n\n              </div>\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n                {contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 onContactSelect={this.onContactSelect.bind(this)}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}