{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport contactList from '../../routes/Contact/data/contactList';\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios';\nimport './index.css';\nlet contactId = 723812738;\n\nclass Contact extends Component {\n  async componentWillMount() {\n    const res = await axios.get('http://localhost:8000/users');\n    this.setState({\n      contactList: res.data,\n      allContact: res.data\n    });\n  }\n\n  constructor() {\n    super();\n\n    _defineProperty(this, \"ContactSideBar\", user => {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-logo\"\n      }, __jsx(\"i\", {\n        className: \"icon icon-contacts gx-mr-4\"\n      }), __jsx(\"span\", null, __jsx(IntlMessages, {\n        id: \"chat.contacts\"\n      })))), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New User\"))))));\n    });\n\n    _defineProperty(this, \"onContactSelect\", data => {\n      data.selected = !data.selected;\n      let selectedContacts = 0;\n      const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n      this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(this, \"onAddContact\", () => {\n      this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(this, \"onContactClose\", () => {\n      this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(this, \"onSaveContact\", async data => {\n      let isNew = true;\n      const contactList = await this.state.allContact.map(async contact => {\n        if (contact._id === data._id) {\n          isNew = false;\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      if (!isNew) {\n        const res = await axios.post('http://localhost:8000/user/register', data);\n      }\n\n      if (isNew) {\n        const result = await axios.post('http://localhost:8000/user/register', data);\n        console.log(result.data);\n        contactList.push(result.data);\n      }\n\n      console.log(contactList);\n      Promise.resolve(...contactList).then(res => {\n        this.setState({\n          alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n          showMessage: true,\n          contactList: [...this.state.contactList, res],\n          allContact: [...this.state.contactList, res]\n        });\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n    });\n\n    _defineProperty(this, \"onDeleteContact\", async data => {\n      const res = await axios.delete('http://localhost:8000/user/' + data._id);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: this.state.allContact.filter(contact => contact._id !== data._id),\n        contactList: this.state.allContact.filter(contact => contact._id !== data._id)\n      });\n    });\n\n    _defineProperty(this, \"onDeleteSelectedContact\", () => {\n      const contacts = this.state.allContact.filter(contact => !contact.selected);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    });\n\n    _defineProperty(this, \"filterContact\", userName => {\n      const {\n        filterOption\n      } = this.state;\n\n      if (userName === '') {\n        this.setState({\n          contactList: this.state.allContact\n        });\n      } else {\n        const filterContact = this.state.allContact.filter(contact => contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n\n        if (filterOption === 'All contacts') {\n          this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.frequently)\n          });\n        } else if (filterOption === 'Starred contacts') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.starred)\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        showMessage: false\n      });\n    });\n\n    _defineProperty(this, \"getAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: true\n      }) : contact);\n      this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(this, \"getUnselectedAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: false\n      }) : contact);\n      this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value\n    });\n    this.filterContact(evt.target.value);\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      user,\n      contactList,\n      addContactState,\n      drawerState,\n      selectedContacts,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage\n    } = this.state;\n    console.log(contactList);\n    return __jsx(\"div\", {\n      className: \"gx-main-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-app-module\"\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\"\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this)\n    }, this.ContactSideBar())), __jsx(\"div\", {\n      className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n    }, this.ContactSideBar(user)), __jsx(\"div\", {\n      className: \"gx-module-box\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-header\"\n    }, __jsx(\"span\", {\n      className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-menu gx-icon-btn\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this)\n    })), __jsx(AppModuleHeader, {\n      placeholder: \"Search contact\",\n      notification: false,\n      apps: false,\n      user: this.state.user,\n      onChange: this.updateContactUser.bind(this),\n      value: this.state.searchUser\n    })), __jsx(\"div\", {\n      className: \"gx-module-box-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-topbar\"\n    }, __jsx(Checkbox, {\n      color: \"primary\",\n      className: \"gx-icon-btn\",\n      indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n      checked: selectedContacts > 0,\n      onChange: this.onAllContactSelect.bind(this),\n      value: \"SelectMail\"\n    }), selectedContacts > 0 && __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-trash\",\n      onClick: this.onDeleteSelectedContact.bind(this)\n    })), __jsx(CustomScrollbars, {\n      className: \"gx-module-content-scroll\"\n    }, contactList.length === 0 ? __jsx(\"div\", {\n      className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\"\n    }, noContentFoundMessage) : __jsx(ContactList, {\n      contactList: contactList,\n      onContactSelect: this.onContactSelect.bind(this),\n      onDeleteContact: this.onDeleteContact.bind(this),\n      onSaveContact: this.onSaveContact.bind(this)\n    }))))), __jsx(AddContact, {\n      open: addContactState,\n      contact: {\n        'id': contactId++,\n        'name': '',\n        'thumb': '',\n        'email': '',\n        'phone': '',\n        'designation': '',\n        'selected': false,\n        'starred': false,\n        'frequently': false\n      },\n      onSaveContact: this.onSaveContact,\n      onContactClose: this.onContactClose,\n      onDeleteContact: this.onDeleteContact\n    }), showMessage && message.info(__jsx(\"span\", {\n      id: \"message-id\"\n    }, alertMessage), 3, this.handleRequestClose));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Contact/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","axios","contactId","Contact","componentWillMount","res","get","setState","data","allContact","constructor","user","onAddContact","selected","selectedContacts","state","map","contact","id","addContactState","isNew","_id","post","result","console","log","push","Promise","resolve","then","alertMessage","showMessage","delete","filter","contacts","userName","filterOption","filterContact","name","toLowerCase","indexOf","frequently","starred","length","noContentFoundMessage","selectedSectionId","drawerState","email","avatar","searchUser","selectedContact","onAllContactSelect","selectAll","getAllContact","getUnselectedAllContact","updateContactUser","evt","target","value","onToggleDrawer","render","bind","ContactSideBar","onDeleteSelectedContact","onContactSelect","onDeleteContact","onSaveContact","onContactClose","info","handleRequestClose"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Checkbox, Drawer, message} from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\n\nimport contactList from '../../routes/Contact/data/contactList'\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddContact\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios'\nimport './index.css';\n\nlet contactId = 723812738;\n\nclass Contact extends Component {\n  async componentWillMount(){\n    const res = await axios.get('http://localhost:8000/users')\n    this.setState({contactList: res.data, allContact: res.data})\n  }\n\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <i className=\"icon icon-contacts gx-mr-4\"/>\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New User</span>\n            </Button>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  onContactSelect = (data) => {\n    data.selected = !data.selected;\n    let selectedContacts = 0;\n    const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n          return data;\n        } else {\n          return contact;\n        }\n      }\n    );\n    this.setState({\n      selectedContacts: selectedContacts,\n      contactList: contactList\n    });\n\n  };\n\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onSaveContact = async (data) => {\n    let isNew = true;\n    const contactList = await this.state.allContact.map(async (contact) => {\n      if (contact._id === data._id) {\n        isNew = false\n        \n        return data\n      } else {\n        return contact\n      }\n    })\n    if (!isNew){\n      const res = await axios.post('http://localhost:8000/user/register', data)\n    }\n    if (isNew) {\n      const result = await axios.post('http://localhost:8000/user/register', data)\n      console.log(result.data)\n      contactList.push(result.data);\n    }\n    console.log(contactList)\n    Promise.resolve(...contactList).then((res) => {\n          this.setState({\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n      showMessage: true,\n      contactList: [...this.state.contactList, res],\n      allContact: [...this.state.contactList, res]\n    });\n    })\n\n    // this.onFilterOptionSelect(this.state.filterOption);\n  };\n  onDeleteContact = async (data) => {\n    const res = await axios.delete('http://localhost:8000/user/' + data._id)\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: this.state.allContact.filter((contact) => contact._id !== data._id),\n      contactList: this.state.allContact.filter((contact) => contact._id !== data._id)\n    })\n  };\n  onDeleteSelectedContact = () => {\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: contacts,\n      contactList: contacts,\n      selectedContacts: 0\n    })\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = this.state.allContact.filter((contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n  getAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: true\n    } : contact);\n    this.setState({\n      selectedContacts: contactList.length,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n  getUnselectedAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: false\n    } : contact);\n    this.setState({\n      selectedContacts: 0,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false,\n    }\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    console.log(contactList)\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n           <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div> \n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <div className=\"gx-module-box-topbar\">\n                <Checkbox color=\"primary\" className=\"gx-icon-btn\"\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\n                          checked={selectedContacts > 0}\n                          onChange={this.onAllContactSelect.bind(this)}\n                          value=\"SelectMail\"/>\n\n\n                {selectedContacts > 0 &&\n                <i className=\"gx-icon-btn icon icon-trash\" onClick={this.onDeleteSelectedContact.bind(this)}/>}\n\n              </div>\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n                {contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 onContactSelect={this.onContactSelect.bind(this)}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}