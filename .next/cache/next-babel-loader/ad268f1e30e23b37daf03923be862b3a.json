{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from \"react\";\nimport { Button, Checkbox, Drawer, Dropdown, Menu, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport axios from 'axios';\nimport mails from \"./data/mails\";\nimport folders from \"./data/folders\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport MailList from \"../../app/components/mail/MailList\";\nimport ComposeMail from \"../../app/components/mail/Compose\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport MailDetail from \"../../app/components/mail/MailDetail\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport CircularProgress from \"../../app/components/CircularProgress\";\nimport './index.css';\nimport AddMail from \"../../app/components/mail/addMail\";\n\nclass Mail extends PureComponent {\n  async onDeleteMail(data) {\n    console.log(data);\n    const res = await axios.delete('http://localhost:8000/banner/' + data._id);\n    console.log(res.data);\n  }\n\n  constructor() {\n    super();\n\n    _defineProperty(this, \"MailSideBar\", mail => {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\"\n      }), __jsx(\"div\", {\n        className: \"gx-module-side-content\"\n      }, __jsx(CustomScrollbars, {\n        className: \"gx-module-side-scroll\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-add-task\"\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: this.onAddContact\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\"\n      }), __jsx(\"span\", null, \"Add New Banner\"))))));\n    });\n\n    _defineProperty(this, \"onAddContact\", () => {\n      this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(this, \"onContactClose\", () => {\n      this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(this, \"onDeleteMail\", () => {\n      const mails = this.state.allMail.map(mail => mail.selected && mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        folder: 4,\n        selected: false\n      }) : mail);\n      this.setState({\n        alertMessage: 'Mail Deleted Successfully',\n        showMessage: true,\n        selectedMails: 0,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"getNavFolders\", () => {\n      return folders.map((folder, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allMail.filter(mail => mail.folder === folder.id);\n          this.setState({\n            selectedFolder: folder.id,\n            noContentFoundMessage: 'No Mail found in selected folder',\n            currentMail: null,\n            loader: true,\n            folderMails: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        }\n      }, __jsx(\"span\", {\n        className: `${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`\n      }, __jsx(\"i\", {\n        className: `icon icon-${folder.icon}`\n      }), __jsx(\"span\", null, folder.title))));\n    });\n\n    _defineProperty(this, \"onFolderMenuItemSelect\", e => {\n      const id = +e.key;\n      const mails = this.state.allMail.map(mail => mail.selected && mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        folder: id,\n        selected: false\n      }) : mail);\n      this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        noContentFoundMessage: 'No Mail found in selected folder',\n        alertMessage: 'Mail has been moved successfully',\n        showMessage: true,\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"onLabelMenuItemSelect\", e => {\n      const id = +e.key;\n      const mails = this.state.allMail.map(mail => {\n        if (mail.selected && mail.folder === this.state.selectedFolder) {\n          if (mail.labels.includes(id)) {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: this.removeLabel(mail, id)\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: this.addLabel(mail, id)\n            });\n          }\n        } else {\n          return mail;\n        }\n      });\n      this.setState({\n        noContentFoundMessage: 'No Mail found in selected label',\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        composeMail: false,\n        showMessage: false\n      });\n    });\n\n    _defineProperty(this, \"getNavFilters\", () => {\n      return filters.map((filter, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allMail.filter(mail => {\n            if (filter.id === 0 && mail.starred && mail.folder === this.state.selectedFolder) {\n              return mail;\n            } else if (filter.id === 1 && mail.important && mail.folder === this.state.selectedFolder) {\n              return mail;\n            }\n\n            return null;\n          });\n          this.setState({\n            noContentFoundMessage: 'No Mail found in selected filter',\n            loader: true,\n            folderMails: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        }\n      }, __jsx(\"span\", {\n        className: \"gx-link\"\n      }, __jsx(\"i\", {\n        className: `icon icon-${filter.icon}`\n      }), __jsx(\"span\", null, filter.title))));\n    });\n\n    _defineProperty(this, \"onOptionMenuItemSelect\", e => {\n      switch (e.key) {\n        case 'All':\n          this.handleRequestClose();\n          this.getAllMail();\n          break;\n\n        case 'None':\n          this.handleRequestClose();\n          this.getUnselectedAllMail();\n          break;\n\n        case 'Read':\n          this.handleRequestClose();\n          this.getReadMail();\n          break;\n\n        case 'Unread':\n          this.handleRequestClose();\n          this.getUnreadMail();\n          break;\n\n        case 'Starred':\n          this.handleRequestClose();\n          this.getStarredMail();\n          break;\n\n        case 'Unstarred':\n          this.handleRequestClose();\n          this.getUnStarredMail();\n          break;\n\n        case 'Important':\n          this.handleRequestClose();\n          this.getImportantMail();\n          break;\n\n        case 'Unimportant':\n          this.handleRequestClose();\n          this.getUnimportantMail();\n          break;\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"onDeleteContact\", async data => {\n      const res = await axios.delete('http://localhost:8000/banner/' + data._id);\n      console.log(res.data);\n      this.render();\n    });\n\n    _defineProperty(this, \"getAllMail\", () => {\n      let mails = this.state.allMail.map(mail => mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        selected: true\n      }) : mail);\n      this.setState({\n        selectedMails: mails.length,\n        allMail: mails,\n        optionName: 'All',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"getUnselectedAllMail\", () => {\n      let mails = this.state.allMail.map(mail => mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        selected: false\n      }) : mail);\n      this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        optionName: 'None',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"getReadMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Read',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getUnreadMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (!mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unread',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getStarredMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Starred',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getUnStarredMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (!mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'UnStarred',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getImportantMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Important',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getUnimportantMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (!mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unimportant',\n        noContentFoundMessage: 'No Mail found in selected Label',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getNavLabels\", () => {\n      return labels.map((label, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allMail.filter(mail => mail.labels.includes(label.id) && mail.folder === this.state.selectedFolder);\n          this.setState({\n            loader: true,\n            noContentFoundMessage: 'No Mail found in selected label',\n            folderMails: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        }\n      }, __jsx(\"span\", {\n        className: \"gx-link\"\n      }, __jsx(\"i\", {\n        className: `icon icon-tag gx-text-${label.color}`\n      }), __jsx(\"span\", null, label.title))));\n    });\n\n    _defineProperty(this, \"searchMail\", searchText => {\n      if (searchText === '') {\n        this.setState({\n          folderMails: this.state.allMail.filter(mail => !mail.deleted)\n        });\n      } else {\n        const searchMails = this.state.allMail.filter(mail => mail.title.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\n        this.setState({\n          folderMails: searchMails\n        });\n      }\n    });\n\n    _defineProperty(this, \"displayMail\", (currentMail, folderMails, noContentFoundMessage) => {\n      return __jsx(\"div\", {\n        className: \"gx-module-box-column\"\n      }, currentMail === null ? folderMails.length === 0 ? __jsx(\"div\", {\n        className: \"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\"\n      }, noContentFoundMessage) : __jsx(MailList, {\n        mails: folderMails,\n        onStartSelect: this.onStartSelect.bind(this),\n        onMailSelect: this.onMailSelect.bind(this),\n        onMailChecked: this.onMailChecked.bind(this),\n        onDeleteMail: this.onDeleteMail.bind(this)\n      }) : __jsx(MailDetail, {\n        mail: currentMail,\n        onStartSelect: this.onStartSelect.bind(this),\n        onImportantSelect: this.onImportantSelect.bind(this)\n      }));\n    });\n\n    _defineProperty(this, \"getMailActions\", () => {\n      return __jsx(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\"\n      }, __jsx(Dropdown, {\n        overlay: this.folderMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"i\", {\n        className: \"icon icon-folder gx-icon-btn\"\n      })), __jsx(Dropdown, {\n        overlay: this.labelMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"i\", {\n        className: \"icon icon-tag gx-icon-btn\"\n      })), __jsx(\"span\", {\n        onClick: this.onDeleteMail.bind(this)\n      }, __jsx(\"i\", {\n        className: \"icon icon-trash gx-icon-btn\"\n      })));\n    });\n\n    _defineProperty(this, \"optionMenu\", () => __jsx(Menu, {\n      id: \"option-menu\",\n      onClick: this.onOptionMenuItemSelect.bind(this)\n    }, options.map(option => __jsx(Menu.Item, {\n      key: option.title\n    }, option.title))));\n\n    _defineProperty(this, \"folderMenu\", () => __jsx(Menu, {\n      id: \"folder-menu\",\n      onClick: this.onFolderMenuItemSelect.bind(this)\n    }, folders.map(folder => __jsx(Menu.Item, {\n      key: folder.id\n    }, folder.title))));\n\n    _defineProperty(this, \"labelMenu\", () => __jsx(Menu, {\n      id: \"label-menu\",\n      onClick: this.onLabelMenuItemSelect.bind(this)\n    }, labels.map(label => __jsx(Menu.Item, {\n      key: label.id\n    }, label.title))));\n\n    _defineProperty(this, \"onSaveContact\", async data => {\n      const formData = new FormData();\n      formData.append('file', data.imgUrl);\n      const res = await axios.post('http://localhost:8000/banner/upload');\n      console.log(res);\n      /*     const result = await axios.post('http://localhost:8000/banner', data)\r\n          this.setState({onAddContact: false, folderMails: [...this.folderMails, result]}) */\n    });\n\n    this.state = {\n      searchMail: '',\n      addContactState: false,\n      noContentFoundMessage: 'No Mail found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allMail: mails,\n      loader: true,\n      currentMail: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      selectedMails: 0,\n      selectedFolder: 0,\n      composeMail: false,\n      folderMails: mails.filter(mail => mail.folder === 0)\n    };\n  }\n\n  async componentDidMount() {\n    const result = await axios.get('http://localhost:8000/banner');\n    console.log(result.data);\n    this.setState({\n      loader: false,\n      folderMails: result.data,\n      allMail: result.data\n    });\n  }\n\n  onMailChecked(data) {\n    data.selected = !data.selected;\n    let selectedMail = 0;\n    const mails = this.state.folderMails.map(mail => {\n      if (mail.selected) {\n        selectedMail++;\n      }\n\n      if (mail.id === data.id) {\n        if (mail.selected) {\n          selectedMail++;\n        }\n\n        return data;\n      } else {\n        return mail;\n      }\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      folderMails: mails\n    });\n  }\n\n  onAllMailSelect() {\n    const selectAll = this.state.selectedMails <= this.state.folderMails.length;\n\n    if (selectAll) {\n      this.getAllMail();\n    } else {\n      this.getUnselectedAllMail();\n    }\n  }\n\n  removeLabel(mail, label) {\n    mail.labels.splice(mail.labels.indexOf(label), 1);\n\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n      this.setState({\n        currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n          labels: mail.labels\n        })\n      });\n    }\n\n    return mail.labels;\n  }\n\n  onStartSelect(data) {\n    data.starred = !data.starred;\n    this.setState({\n      alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n      showMessage: true,\n      folderMails: this.state.folderMails.map(mail => mail.id === data.id ? data : mail)\n    });\n  }\n\n  onImportantSelect(data) {\n    data.important = !data.important;\n    this.setState({\n      alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n      showMessage: true,\n      folderMails: this.state.folderMails.map(mail => mail.id === data.id ? data : mail)\n    });\n  }\n\n  onMailSend(data) {\n    this.setState({\n      alertMessage: 'Mail Sent Successfully',\n      showMessage: true,\n      folderMails: this.state.allMail.concat(data),\n      allMail: this.state.allMail.concat(data)\n    });\n  }\n\n  onMailSelect(mail) {\n    this.setState({\n      loader: true,\n      currentMail: mail\n    });\n    setTimeout(() => {\n      this.setState({\n        loader: false\n      });\n    }, 1500);\n  }\n\n  addLabel(mail, label) {\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n      this.setState({\n        currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n          labels: mail.labels.concat(label)\n        })\n      });\n    }\n\n    return mail.labels.concat(label);\n  }\n\n  updateSearch(evt) {\n    this.setState({\n      searchMail: evt.target.value\n    });\n    this.searchMail(evt.target.value);\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      selectedMails,\n      loader,\n      currentMail,\n      drawerState,\n      folderMails,\n      composeMail,\n      user,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage,\n      addContactState\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"gx-main-content\"\n    }, __jsx(\"div\", {\n      className: \"gx-app-module\"\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\"\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this)\n    })), __jsx(\"div\", {\n      className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\"\n    }, this.MailSideBar(currentMail)), __jsx(\"div\", {\n      className: \"gx-module-box\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-header\"\n    }, __jsx(\"span\", {\n      className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\"\n    }, __jsx(\"i\", {\n      className: \"icon icon-menu gx-icon-btn\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this)\n    })), __jsx(AppModuleHeader, {\n      placeholder: \"Search mails\",\n      user: this.state.user,\n      onChange: this.updateSearch.bind(this),\n      value: this.state.searchMail\n    })), __jsx(\"div\", {\n      className: \"gx-module-box-content\"\n    }, loader ? __jsx(\"div\", {\n      className: \"gx-loader-view\"\n    }, __jsx(CircularProgress, null)) : this.displayMail(currentMail, folderMails, noContentFoundMessage), __jsx(ComposeMail, {\n      open: composeMail,\n      user: user,\n      onClose: this.handleRequestClose.bind(this),\n      onMailSend: this.onMailSend.bind(this)\n    })))), __jsx(AddMail, {\n      open: addContactState,\n      onSaveContact: this.onSaveContact,\n      onContactClose: this.onContactClose,\n      onDeleteContact: this.onDeleteContact\n    }), showMessage && message.info(__jsx(\"span\", {\n      id: \"message-id\"\n    }, alertMessage), 3, this.handleRequestClose));\n  }\n\n}\n\nexport default Mail;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Banner/index.js"],"names":["React","PureComponent","Button","Checkbox","Drawer","Dropdown","Menu","message","CustomScrollbars","axios","mails","folders","filters","labels","options","MailList","ComposeMail","AppModuleHeader","MailDetail","IntlMessages","CircularProgress","AddMail","Mail","onDeleteMail","data","console","log","res","delete","_id","constructor","mail","onAddContact","setState","addContactState","state","allMail","map","selected","folder","selectedFolder","alertMessage","showMessage","selectedMails","folderMails","filter","index","filterMails","id","noContentFoundMessage","currentMail","loader","setTimeout","icon","title","e","key","includes","removeLabel","addLabel","composeMail","starred","important","handleRequestClose","getAllMail","getUnselectedAllMail","getReadMail","getUnreadMail","getStarredMail","getUnStarredMail","getImportantMail","getUnimportantMail","render","length","optionName","selectedMail","read","label","color","searchText","deleted","searchMails","toLowerCase","indexOf","onStartSelect","bind","onMailSelect","onMailChecked","onImportantSelect","folderMenu","labelMenu","onOptionMenuItemSelect","option","onFolderMenuItemSelect","onLabelMenuItemSelect","formData","FormData","append","imgUrl","post","searchMail","drawerState","anchorEl","user","name","email","avatar","componentDidMount","result","get","onAllMailSelect","selectAll","splice","onMailSend","concat","updateSearch","evt","target","value","onToggleDrawer","MailSideBar","displayMail","onSaveContact","onContactClose","onDeleteContact","info"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,SAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkDC,OAAlD,QAAgE,MAAhE;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AAEA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,mCAApB;;AAGA,MAAMC,IAAN,SAAmBrB,aAAnB,CAAiC;AAsVb,QAAZsB,YAAY,CAACC,IAAD,EAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAMG,GAAG,GAAG,MAAMlB,KAAK,CAACmB,MAAN,CAAa,kCAAkCJ,IAAI,CAACK,GAApD,CAAlB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACH,IAAhB;AAED;;AAmEDM,EAAAA,WAAW,GAAG;AACZ;;AADY,yCA7ZCC,IAAD,IAAU;AACtB,aAAO;AAAK,QAAA,SAAS,EAAC;AAAf,SACL;AAAK,QAAA,SAAS,EAAC;AAAf,QADK,EAIL;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,gBAAD;AAAkB,QAAA,SAAS,EAAC;AAA5B,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAyC,QAAA,IAAI,EAAC,SAA9C;AAAwD,sBAAW,KAAnE;AACQ,QAAA,OAAO,EAAE,KAAKC;AADtB,SAEE;AAAG,QAAA,SAAS,EAAC;AAAb,QAFF,EAGE,qCAHF,CADF,CADF,CADF,CAJK,CAAP;AAiBD,KA2Ya;;AAAA,0CA1YC,MAAM;AACnB,WAAKC,QAAL,CAAc;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD,KAwYa;;AAAA,4CAvYG,MAAM;AACrB,WAAKD,QAAL,CAAc;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD,KAqYa;;AAAA,0CAnYC,MAAM;AACnB,YAAMxB,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBN,IAAI,IACvCA,IAAI,CAACO,QAAL,IAAkBP,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA7C,mCACMT,IADN;AACYQ,QAAAA,MAAM,EAAE,CADpB;AACuBD,QAAAA,QAAQ,EAAE;AADjC,WAC2CP,IAF/B,CAAd;AAIA,WAAKE,QAAL,CAAc;AACZQ,QAAAA,YAAY,EAAE,2BADF;AAEZC,QAAAA,WAAW,EAAE,IAFD;AAGZC,QAAAA,aAAa,EAAE,CAHH;AAIZP,QAAAA,OAAO,EAAE1B,KAJG;AAKZkC,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AALD,OAAd;AAOD,KAuXa;;AAAA,2CArXE,MAAM;AACpB,aAAO7B,OAAO,CAAC0B,GAAR,CAAY,CAACE,MAAD,EAASO,KAAT,KACjB;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAgB,QAAA,OAAO,EAAE,MAAM;AAC7B,gBAAMC,WAAW,GAAG,KAAKZ,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgBA,MAAM,CAACS,EAAzD,CAApB;AACA,eAAKf,QAAL,CAAc;AACZO,YAAAA,cAAc,EAAED,MAAM,CAACS,EADX;AAEZC,YAAAA,qBAAqB,EAAE,kCAFX;AAGZC,YAAAA,WAAW,EAAE,IAHD;AAIZC,YAAAA,MAAM,EAAE,IAJI;AAKZP,YAAAA,WAAW,EAAEG;AALD,WAAd;AAOAK,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKnB,QAAL,CAAc;AAACkB,cAAAA,MAAM,EAAE;AAAT,aAAd;AACD,WAFS,EAEP,IAFO,CAAV;AAGD;AAZD,SAcE;AAAM,QAAA,SAAS,EAAG,GAAE,KAAKhB,KAAL,CAAWK,cAAX,KAA8BD,MAAM,CAACS,EAArC,GAA0C,gBAA1C,GAA6D,SAAU;AAA3F,SACE;AAAG,QAAA,SAAS,EAAG,aAAYT,MAAM,CAACc,IAAK;AAAvC,QADF,EAEE,oBAAOd,MAAM,CAACe,KAAd,CAFF,CAdF,CADK,CAAP;AAqBD,KA+Va;;AAAA,oDA5VYC,CAAD,IAAO;AAC9B,YAAMP,EAAE,GAAG,CAACO,CAAC,CAACC,GAAd;AACA,YAAM9C,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBN,IAAI,IACvCA,IAAI,CAACO,QAAL,IAAkBP,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA7C,mCACMT,IADN;AACYQ,QAAAA,MAAM,EAAES,EADpB;AACwBV,QAAAA,QAAQ,EAAE;AADlC,WAC4CP,IAFhC,CAAd;AAIA,WAAKE,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAE,CADH;AAEZP,QAAAA,OAAO,EAAE1B,KAFG;AAGZuC,QAAAA,qBAAqB,EAAE,kCAHX;AAIZR,QAAAA,YAAY,EAAE,kCAJF;AAKZC,QAAAA,WAAW,EAAE,IALD;AAMZE,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAND,OAAd;AAQD,KA8Ua;;AAAA,mDA5UWe,CAAD,IAAO;AAC7B,YAAMP,EAAE,GAAG,CAACO,CAAC,CAACC,GAAd;AACA,YAAM9C,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAuBN,IAAI,IAAI;AACzC,YAAIA,IAAI,CAACO,QAAL,IAAkBP,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAjD,EAAkE;AAChE,cAAIT,IAAI,CAAClB,MAAL,CAAY4C,QAAZ,CAAqBT,EAArB,CAAJ,EAA8B;AAC5B,mDAAWjB,IAAX;AAAiBlB,cAAAA,MAAM,EAAE,KAAK6C,WAAL,CAAiB3B,IAAjB,EAAuBiB,EAAvB;AAAzB;AACD,WAFD,MAEO;AACL,mDAAWjB,IAAX;AAAiBlB,cAAAA,MAAM,EAAE,KAAK8C,QAAL,CAAc5B,IAAd,EAAoBiB,EAApB;AAAzB;AACD;AACF,SAND,MAMO;AACL,iBAAOjB,IAAP;AACD;AACF,OAVW,CAAd;AAYA,WAAKE,QAAL,CAAc;AACZgB,QAAAA,qBAAqB,EAAE,iCADX;AAEZR,QAAAA,YAAY,EAAE,4BAFF;AAGZC,QAAAA,WAAW,EAAE,IAHD;AAIZN,QAAAA,OAAO,EAAE1B,KAJG;AAKZkC,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AALD,OAAd;AAOD,KAuTa;;AAAA,gDArTO,MAAM;AACzB,WAAKP,QAAL,CAAc;AACZ2B,QAAAA,WAAW,EAAE,KADD;AAEZlB,QAAAA,WAAW,EAAE;AAFD,OAAd;AAID,KAgTa;;AAAA,2CA/SE,MAAM;AACpB,aAAO9B,OAAO,CAACyB,GAAR,CAAY,CAACQ,MAAD,EAASC,KAAT,KACjB;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAgB,QAAA,OAAO,EAAE,MAAM;AAC7B,gBAAMC,WAAW,GAAG,KAAKZ,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAI;AACpD,gBAAIc,MAAM,CAACG,EAAP,KAAc,CAAd,IAAmBjB,IAAI,CAAC8B,OAAxB,IAAmC9B,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAlE,EAAkF;AAChF,qBAAOT,IAAP;AACD,aAFD,MAEO,IAAIc,MAAM,CAACG,EAAP,KAAc,CAAd,IAAmBjB,IAAI,CAAC+B,SAAxB,IAAqC/B,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAApE,EAAoF;AACzF,qBAAOT,IAAP;AACD;;AACD,mBAAO,IAAP;AACD,WAPmB,CAApB;AAQA,eAAKE,QAAL,CAAc;AACZgB,YAAAA,qBAAqB,EAAE,kCADX;AAEZE,YAAAA,MAAM,EAAE,IAFI;AAGZP,YAAAA,WAAW,EAAEG;AAHD,WAAd;AAKAK,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKnB,QAAL,CAAc;AAACkB,cAAAA,MAAM,EAAE;AAAT,aAAd;AACD,WAFS,EAEP,IAFO,CAAV;AAGD;AAjBD,SAmBE;AAAM,QAAA,SAAS,EAAC;AAAhB,SACE;AAAG,QAAA,SAAS,EAAG,aAAYN,MAAM,CAACQ,IAAK;AAAvC,QADF,EAEE,oBAAOR,MAAM,CAACS,KAAd,CAFF,CAnBF,CADK,CAAP;AA0BD,KAoRa;;AAAA,oDAnRYC,CAAD,IAAO;AAC9B,cAAQA,CAAC,CAACC,GAAV;AACE,aAAK,KAAL;AACE,eAAKO,kBAAL;AACA,eAAKC,UAAL;AACA;;AACF,aAAK,MAAL;AACE,eAAKD,kBAAL;AACA,eAAKE,oBAAL;AACA;;AACF,aAAK,MAAL;AACE,eAAKF,kBAAL;AACA,eAAKG,WAAL;AACA;;AACF,aAAK,QAAL;AACE,eAAKH,kBAAL;AACA,eAAKI,aAAL;AACA;;AACF,aAAK,SAAL;AACE,eAAKJ,kBAAL;AACA,eAAKK,cAAL;AACA;;AACF,aAAK,WAAL;AACE,eAAKL,kBAAL;AACA,eAAKM,gBAAL;AACA;;AACF,aAAK,WAAL;AACE,eAAKN,kBAAL;AACA,eAAKO,gBAAL;AACA;;AACF,aAAK,aAAL;AACE,eAAKP,kBAAL;AACA,eAAKQ,kBAAL;AACA;;AACF;AACE;AAlCJ;AAoCD,KA8Oa;;AAAA,6CA7OI,MAAO/C,IAAP,IAAgB;AAChC,YAAMG,GAAG,GAAG,MAAMlB,KAAK,CAACmB,MAAN,CAAa,kCAAkCJ,IAAI,CAACK,GAApD,CAAlB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACH,IAAhB;AACA,WAAKgD,MAAL;AAED,KAwOa;;AAAA,wCAvOD,MAAM;AACjB,UAAI9D,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAwBN,IAAD,IAAUA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA3B,mCACxCT,IADwC;AAE3CO,QAAAA,QAAQ,EAAE;AAFiC,WAGzCP,IAHQ,CAAZ;AAIA,WAAKE,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAEjC,KAAK,CAAC+D,MADT;AAEZrC,QAAAA,OAAO,EAAE1B,KAFG;AAGZgE,QAAAA,UAAU,EAAE,KAHA;AAIZ9B,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAJD,OAAd;AAMD,KA4Na;;AAAA,kDA3NS,MAAM;AAC3B,UAAI9B,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBC,GAAnB,CAAwBN,IAAD,IAAUA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA3B,mCACxCT,IADwC;AAE3CO,QAAAA,QAAQ,EAAE;AAFiC,WAGzCP,IAHQ,CAAZ;AAIA,WAAKE,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAE,CADH;AAEZP,QAAAA,OAAO,EAAE1B,KAFG;AAGZgE,QAAAA,UAAU,EAAE,MAHA;AAIZ9B,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAJD,OAAd;AAMD,KAgNa;;AAAA,yCA/MA,MAAM;AAClB,UAAImC,YAAY,GAAG,CAAnB;AACA,UAAIjE,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA7D,CAAZ;AACA9B,MAAAA,KAAK,GAAGA,KAAK,CAAC2B,GAAN,CAAWN,IAAD,IAAU;AAC1B,YAAIA,IAAI,CAAC6C,IAAT,EAAe;AACbD,UAAAA,YAAY;AACZ,iDAAW5C,IAAX;AAAiBO,YAAAA,QAAQ,EAAE;AAA3B;AACD;;AACD,+CAAWP,IAAX;AAAiBO,UAAAA,QAAQ,EAAE;AAA3B;AACD,OANO,CAAR;AAOA,WAAKL,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAEgC,YADH;AAEZD,QAAAA,UAAU,EAAE,MAFA;AAGZ9B,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAHD,OAAd;AAKA,aAAO9B,KAAP;AACD,KA+La;;AAAA,2CA9LE,MAAM;AACpB,UAAIiE,YAAY,GAAG,CAAnB;AACA,UAAIjE,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA7D,CAAZ;AACA9B,MAAAA,KAAK,GAAGA,KAAK,CAAC2B,GAAN,CAAWN,IAAD,IAAU;AAC1B,YAAI,CAACA,IAAI,CAAC6C,IAAV,EAAgB;AACdD,UAAAA,YAAY;AACZ,iDAAW5C,IAAX;AAAiBO,YAAAA,QAAQ,EAAE;AAA3B;AACD;;AACD,+CAAWP,IAAX;AAAiBO,UAAAA,QAAQ,EAAE;AAA3B;AACD,OANO,CAAR;AAOA,WAAKL,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAEgC,YADH;AAEZD,QAAAA,UAAU,EAAE,QAFA;AAGZ9B,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAHD,OAAd;AAKA,aAAO9B,KAAP;AACD,KA8Ka;;AAAA,4CA7KG,MAAM;AACrB,UAAIiE,YAAY,GAAG,CAAnB;AACA,UAAIjE,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA7D,CAAZ;AACA9B,MAAAA,KAAK,GAAGA,KAAK,CAAC2B,GAAN,CAAWN,IAAD,IAAU;AAC1B,YAAIA,IAAI,CAAC8B,OAAT,EAAkB;AAChBc,UAAAA,YAAY;AACZ,iDAAW5C,IAAX;AAAiBO,YAAAA,QAAQ,EAAE;AAA3B;AACD;;AACD,+CAAWP,IAAX;AAAiBO,UAAAA,QAAQ,EAAE;AAA3B;AACD,OANO,CAAR;AAOA,WAAKL,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAEgC,YADH;AAEZD,QAAAA,UAAU,EAAE,SAFA;AAGZ9B,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAHD,OAAd;AAKA,aAAO9B,KAAP;AACD,KA6Ja;;AAAA,8CA5JK,MAAM;AACvB,UAAIiE,YAAY,GAAG,CAAnB;AACA,UAAIjE,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA3B,IAA6CT,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA1G,CAAZ;AACA9B,MAAAA,KAAK,GAAGA,KAAK,CAAC2B,GAAN,CAAWN,IAAD,IAAU;AAC1B,YAAI,CAACA,IAAI,CAAC8B,OAAV,EAAmB;AACjBc,UAAAA,YAAY;AACZ,iDAAW5C,IAAX;AAAiBO,YAAAA,QAAQ,EAAE;AAA3B;AACD;;AACD,+CAAWP,IAAX;AAAiBO,UAAAA,QAAQ,EAAE;AAA3B;AACD,OANO,CAAR;AAOA,WAAKL,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAEgC,YADH;AAEZD,QAAAA,UAAU,EAAE,WAFA;AAGZ9B,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAHD,OAAd;AAKA,aAAO9B,KAAP;AACD,KA4Ia;;AAAA,8CA3IK,MAAM;AACvB,UAAIiE,YAAY,GAAG,CAAnB;AACA,UAAIjE,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA3B,IAA6CT,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA1G,CAAZ;AACA9B,MAAAA,KAAK,GAAGA,KAAK,CAAC2B,GAAN,CAAWN,IAAD,IAAU;AAC1B,YAAIA,IAAI,CAAC+B,SAAT,EAAoB;AAClBa,UAAAA,YAAY;AACZ,iDAAW5C,IAAX;AAAiBO,YAAAA,QAAQ,EAAE;AAA3B;AACD;;AACD,+CAAWP,IAAX;AAAiBO,UAAAA,QAAQ,EAAE;AAA3B;AACD,OANO,CAAR;AAOA,WAAKL,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAEgC,YADH;AAEZD,QAAAA,UAAU,EAAE,WAFA;AAGZ9B,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAHD,OAAd;AAKA,aAAO9B,KAAP;AACD,KA2Ha;;AAAA,gDA1HO,MAAM;AACzB,UAAIiE,YAAY,GAAG,CAAnB;AACA,UAAIjE,KAAK,GAAG,KAAKyB,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA3B,IAA6CT,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA1G,CAAZ;AACA9B,MAAAA,KAAK,GAAGA,KAAK,CAAC2B,GAAN,CAAWN,IAAD,IAAU;AAC1B,YAAI,CAACA,IAAI,CAAC+B,SAAV,EAAqB;AACnBa,UAAAA,YAAY;AACZ,iDAAW5C,IAAX;AAAiBO,YAAAA,QAAQ,EAAE;AAA3B;AACD;;AACD,+CAAWP,IAAX;AAAiBO,UAAAA,QAAQ,EAAE;AAA3B;AACD,OANO,CAAR;AAOA,WAAKL,QAAL,CAAc;AACZU,QAAAA,aAAa,EAAEgC,YADH;AAEZD,QAAAA,UAAU,EAAE,aAFA;AAGZzB,QAAAA,qBAAqB,EAAE,iCAHX;AAIZL,QAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAAhD;AAJD,OAAd;AAMA,aAAO9B,KAAP;AACD,KAyGa;;AAAA,0CAxGC,MAAM;AACnB,aAAOG,MAAM,CAACwB,GAAP,CAAW,CAACwC,KAAD,EAAQ/B,KAAR,KAChB;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAgB,QAAA,OAAO,EAAE,MAAM;AAC7B,gBAAMC,WAAW,GAAG,KAAKZ,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA0Bd,IAAI,IAAIA,IAAI,CAAClB,MAAL,CAAY4C,QAAZ,CAAqBoB,KAAK,CAAC7B,EAA3B,KAAkCjB,IAAI,CAACQ,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,cAA/F,CAApB;AACA,eAAKP,QAAL,CAAc;AACZkB,YAAAA,MAAM,EAAE,IADI;AAEZF,YAAAA,qBAAqB,EAAE,iCAFX;AAGZL,YAAAA,WAAW,EAAEG;AAHD,WAAd;AAKAK,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKnB,QAAL,CAAc;AAACkB,cAAAA,MAAM,EAAE;AAAT,aAAd;AACD,WAFS,EAEP,IAFO,CAAV;AAGD;AAVD,SAYE;AAAM,QAAA,SAAS,EAAC;AAAhB,SACE;AAAG,QAAA,SAAS,EAAG,yBAAwB0B,KAAK,CAACC,KAAM;AAAnD,QADF,EAEE,oBAAOD,KAAK,CAACvB,KAAb,CAFF,CAZF,CADK,CAAP;AAmBD,KAoFa;;AAAA,wCAnFAyB,UAAD,IAAgB;AAC3B,UAAIA,UAAU,KAAK,EAAnB,EAAuB;AACrB,aAAK9C,QAAL,CAAc;AAACW,UAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA2Bd,IAAD,IAAU,CAACA,IAAI,CAACiD,OAA1C;AAAd,SAAd;AACD,OAFD,MAEO;AACL,cAAMC,WAAW,GAAG,KAAK9C,KAAL,CAAWC,OAAX,CAAmBS,MAAnB,CAA2Bd,IAAD,IAC5CA,IAAI,CAACuB,KAAL,CAAW4B,WAAX,GAAyBC,OAAzB,CAAiCJ,UAAU,CAACG,WAAX,EAAjC,IAA6D,CAAC,CAD5C,CAApB;AAEA,aAAKjD,QAAL,CAAc;AACZW,UAAAA,WAAW,EAAEqC;AADD,SAAd;AAGD;AACF,KAyEa;;AAAA,yCAlEA,CAAC/B,WAAD,EAAcN,WAAd,EAA2BK,qBAA3B,KAAqD;AACjE,aAAQ;AAAK,QAAA,SAAS,EAAC;AAAf,SACLC,WAAW,KAAK,IAAhB,GACCN,WAAW,CAAC6B,MAAZ,KAAuB,CAAvB,GACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGxB,qBADH,CADF,GAKE,MAAC,QAAD;AAAU,QAAA,KAAK,EAAEL,WAAjB;AAA8B,QAAA,aAAa,EAAE,KAAKwC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAA7C;AACU,QAAA,YAAY,EAAE,KAAKC,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CADxB;AAEU,QAAA,aAAa,EAAE,KAAKE,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAFzB;AAGU,QAAA,YAAY,EAAE,KAAK9D,YAAL,CAAkB8D,IAAlB,CAAuB,IAAvB;AAHxB,QANH,GAWC,MAAC,UAAD;AAAY,QAAA,IAAI,EAAEnC,WAAlB;AAA+B,QAAA,aAAa,EAAE,KAAKkC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAA9C;AACY,QAAA,iBAAiB,EAAE,KAAKG,iBAAL,CAAuBH,IAAvB,CAA4B,IAA5B;AAD/B,QAZI,CAAR;AAeD,KAkDa;;AAAA,4CAjDG,MAAM;AACrB,aAAO;AAAK,QAAA,SAAS,EAAC;AAAf,SAEL,MAAC,QAAD;AAAU,QAAA,OAAO,EAAE,KAAKI,UAAL,EAAnB;AAAsC,QAAA,SAAS,EAAC,aAAhD;AAA8D,QAAA,OAAO,EAAE,CAAC,OAAD;AAAvE,SACE;AAAG,QAAA,SAAS,EAAC;AAAb,QADF,CAFK,EAML,MAAC,QAAD;AAAU,QAAA,OAAO,EAAE,KAAKC,SAAL,EAAnB;AAAqC,QAAA,SAAS,EAAC,aAA/C;AAA6D,QAAA,OAAO,EAAE,CAAC,OAAD;AAAtE,SACE;AAAG,QAAA,SAAS,EAAC;AAAb,QADF,CANK,EAUL;AAAM,QAAA,OAAO,EAAE,KAAKnE,YAAL,CAAkB8D,IAAlB,CAAuB,IAAvB;AAAf,SACE;AAAG,QAAA,SAAS,EAAC;AAAb,QADF,CAVK,CAAP;AAcD,KAkCa;;AAAA,wCAhCD,MACX,MAAC,IAAD;AAAM,MAAA,EAAE,EAAC,aAAT;AACM,MAAA,OAAO,EAAE,KAAKM,sBAAL,CAA4BN,IAA5B,CAAiC,IAAjC;AADf,OAEGvE,OAAO,CAACuB,GAAR,CAAYuD,MAAM,IACjB,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA,MAAM,CAACtC;AAAvB,OACGsC,MAAM,CAACtC,KADV,CADD,CAFH,CA+BY;;AAAA,wCAtBD,MACX,MAAC,IAAD;AAAM,MAAA,EAAE,EAAC,aAAT;AACM,MAAA,OAAO,EAAE,KAAKuC,sBAAL,CAA4BR,IAA5B,CAAiC,IAAjC;AADf,OAEG1E,OAAO,CAAC0B,GAAR,CAAYE,MAAM,IACjB,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA,MAAM,CAACS;AAAvB,OACGT,MAAM,CAACe,KADV,CADD,CAFH,CAqBY;;AAAA,uCAZF,MACV,MAAC,IAAD;AAAM,MAAA,EAAE,EAAC,YAAT;AACM,MAAA,OAAO,EAAE,KAAKwC,qBAAL,CAA2BT,IAA3B,CAAgC,IAAhC;AADf,OAEGxE,MAAM,CAACwB,GAAP,CAAWwC,KAAK,IACf,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA,KAAK,CAAC7B;AAAtB,OACG6B,KAAK,CAACvB,KADT,CADD,CAFH,CAWY;;AAAA,2CAoGE,MAAO9B,IAAP,IAAc;AAC5B,YAAMuE,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CACE,MADF,EAEEzE,IAAI,CAAC0E,MAFP;AAIA,YAAMvE,GAAG,GAAG,MAAMlB,KAAK,CAAC0F,IAAN,CAAW,qCAAX,CAAlB;AACA1E,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACJ;AACA;AACG,KA9Ga;;AAEZ,SAAKQ,KAAL,GAAa;AACXiE,MAAAA,UAAU,EAAE,EADD;AAEXlE,MAAAA,eAAe,EAAE,KAFN;AAGXe,MAAAA,qBAAqB,EAAE,kCAHZ;AAIXR,MAAAA,YAAY,EAAE,EAJH;AAKXC,MAAAA,WAAW,EAAE,KALF;AAMX2D,MAAAA,WAAW,EAAE,KANF;AAOX3B,MAAAA,UAAU,EAAE,MAPD;AAQX4B,MAAAA,QAAQ,EAAE,IARC;AASXlE,MAAAA,OAAO,EAAE1B,KATE;AAUXyC,MAAAA,MAAM,EAAE,IAVG;AAWXD,MAAAA,WAAW,EAAE,IAXF;AAYXqD,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAE,gBADF;AAEJC,QAAAA,KAAK,EAAE,oBAFH;AAGJC,QAAAA,MAAM,EAAE;AAHJ,OAZK;AAiBX/D,MAAAA,aAAa,EAAE,CAjBJ;AAkBXH,MAAAA,cAAc,EAAE,CAlBL;AAmBXoB,MAAAA,WAAW,EAAE,KAnBF;AAoBXhB,MAAAA,WAAW,EAAElC,KAAK,CAACmC,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACQ,MAAL,KAAgB,CAArC;AApBF,KAAb;AAsBD;;AAEsB,QAAjBoE,iBAAiB,GAAG;AACxB,UAAMC,MAAM,GAAG,MAAMnG,KAAK,CAACoG,GAAN,CAAU,8BAAV,CAArB;AACApF,IAAAA,OAAO,CAACC,GAAR,CAAYkF,MAAM,CAACpF,IAAnB;AAEA,SAAKS,QAAL,CAAc;AAACkB,MAAAA,MAAM,EAAE,KAAT;AAAgBP,MAAAA,WAAW,EAAEgE,MAAM,CAACpF,IAApC;AAA0CY,MAAAA,OAAO,EAAEwE,MAAM,CAACpF;AAA1D,KAAd;AACD;;AAGD+D,EAAAA,aAAa,CAAC/D,IAAD,EAAO;AAClBA,IAAAA,IAAI,CAACc,QAAL,GAAgB,CAACd,IAAI,CAACc,QAAtB;AACA,QAAIqC,YAAY,GAAG,CAAnB;AACA,UAAMjE,KAAK,GAAG,KAAKyB,KAAL,CAAWS,WAAX,CAAuBP,GAAvB,CAA2BN,IAAI,IAAI;AAC7C,UAAIA,IAAI,CAACO,QAAT,EAAmB;AACjBqC,QAAAA,YAAY;AACb;;AACD,UAAI5C,IAAI,CAACiB,EAAL,KAAYxB,IAAI,CAACwB,EAArB,EAAyB;AACvB,YAAIjB,IAAI,CAACO,QAAT,EAAmB;AACjBqC,UAAAA,YAAY;AACb;;AACD,eAAOnD,IAAP;AACD,OALD,MAKO;AACL,eAAOO,IAAP;AACD;AACF,KAZW,CAAd;AAcA,SAAKE,QAAL,CAAc;AACZU,MAAAA,aAAa,EAAEgC,YADH;AAEZ/B,MAAAA,WAAW,EAAElC;AAFD,KAAd;AAID;;AAEDoG,EAAAA,eAAe,GAAG;AAChB,UAAMC,SAAS,GAAG,KAAK5E,KAAL,CAAWQ,aAAX,IAA4B,KAAKR,KAAL,CAAWS,WAAX,CAAuB6B,MAArE;;AACA,QAAIsC,SAAJ,EAAe;AACb,WAAK/C,UAAL;AACD,KAFD,MAEO;AACL,WAAKC,oBAAL;AACD;AACF;;AAEDP,EAAAA,WAAW,CAAC3B,IAAD,EAAO8C,KAAP,EAAc;AACvB9C,IAAAA,IAAI,CAAClB,MAAL,CAAYmG,MAAZ,CAAmBjF,IAAI,CAAClB,MAAL,CAAYsE,OAAZ,CAAoBN,KAApB,CAAnB,EAA+C,CAA/C;;AACA,QAAI,KAAK1C,KAAL,CAAWe,WAAX,KAA2B,IAA3B,IAAmCnB,IAAI,CAACiB,EAAL,KAAY,KAAKb,KAAL,CAAWe,WAAX,CAAuBF,EAA1E,EAA8E;AAC5E,WAAKf,QAAL,CAAc;AACZiB,QAAAA,WAAW,kCAAMnB,IAAN;AAAYlB,UAAAA,MAAM,EAAEkB,IAAI,CAAClB;AAAzB;AADC,OAAd;AAGD;;AACD,WAAOkB,IAAI,CAAClB,MAAZ;AACD;;AAEDuE,EAAAA,aAAa,CAAC5D,IAAD,EAAO;AAClBA,IAAAA,IAAI,CAACqC,OAAL,GAAe,CAACrC,IAAI,CAACqC,OAArB;AACA,SAAK5B,QAAL,CAAc;AACZQ,MAAAA,YAAY,EAAEjB,IAAI,CAACqC,OAAL,GAAe,mBAAf,GAAqC,qBADvC;AAEZnB,MAAAA,WAAW,EAAE,IAFD;AAGZE,MAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWS,WAAX,CAAuBP,GAAvB,CAA2BN,IAAI,IAC1CA,IAAI,CAACiB,EAAL,KAAYxB,IAAI,CAACwB,EAAjB,GACExB,IADF,GACSO,IAFE;AAHD,KAAd;AAQD;;AAEDyD,EAAAA,iBAAiB,CAAChE,IAAD,EAAO;AACtBA,IAAAA,IAAI,CAACsC,SAAL,GAAiB,CAACtC,IAAI,CAACsC,SAAvB;AACA,SAAK7B,QAAL,CAAc;AACZQ,MAAAA,YAAY,EAAEjB,IAAI,CAACsC,SAAL,GAAiB,wBAAjB,GAA4C,0BAD9C;AAEZpB,MAAAA,WAAW,EAAE,IAFD;AAGZE,MAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWS,WAAX,CAAuBP,GAAvB,CAA2BN,IAAI,IAC1CA,IAAI,CAACiB,EAAL,KAAYxB,IAAI,CAACwB,EAAjB,GACExB,IADF,GACSO,IAFE;AAHD,KAAd;AAQD;;AAcDkF,EAAAA,UAAU,CAACzF,IAAD,EAAO;AACf,SAAKS,QAAL,CACE;AACEQ,MAAAA,YAAY,EAAE,wBADhB;AAEEC,MAAAA,WAAW,EAAE,IAFf;AAGEE,MAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWC,OAAX,CAAmB8E,MAAnB,CAA0B1F,IAA1B,CAHf;AAIEY,MAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,CAAmB8E,MAAnB,CAA0B1F,IAA1B;AAJX,KADF;AAQD;;AAED8D,EAAAA,YAAY,CAACvD,IAAD,EAAO;AACjB,SAAKE,QAAL,CAAc;AACZkB,MAAAA,MAAM,EAAE,IADI;AAEZD,MAAAA,WAAW,EAAEnB;AAFD,KAAd;AAIAqB,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKnB,QAAL,CAAc;AAACkB,QAAAA,MAAM,EAAE;AAAT,OAAd;AACD,KAFS,EAEP,IAFO,CAAV;AAGD;;AAEDQ,EAAAA,QAAQ,CAAC5B,IAAD,EAAO8C,KAAP,EAAc;AACpB,QAAI,KAAK1C,KAAL,CAAWe,WAAX,KAA2B,IAA3B,IAAmCnB,IAAI,CAACiB,EAAL,KAAY,KAAKb,KAAL,CAAWe,WAAX,CAAuBF,EAA1E,EAA8E;AAC5E,WAAKf,QAAL,CAAc;AACZiB,QAAAA,WAAW,kCAAMnB,IAAN;AAAYlB,UAAAA,MAAM,EAAEkB,IAAI,CAAClB,MAAL,CAAYqG,MAAZ,CAAmBrC,KAAnB;AAApB;AADC,OAAd;AAGD;;AACD,WAAO9C,IAAI,CAAClB,MAAL,CAAYqG,MAAZ,CAAmBrC,KAAnB,CAAP;AACD;;AAEDsC,EAAAA,YAAY,CAACC,GAAD,EAAM;AAChB,SAAKnF,QAAL,CAAc;AACZmE,MAAAA,UAAU,EAAEgB,GAAG,CAACC,MAAJ,CAAWC;AADX,KAAd;AAGA,SAAKlB,UAAL,CAAgBgB,GAAG,CAACC,MAAJ,CAAWC,KAA3B;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,SAAKtF,QAAL,CAAc;AACZoE,MAAAA,WAAW,EAAE,CAAC,KAAKlE,KAAL,CAAWkE;AADb,KAAd;AAGD;;AAED7B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAC7B,MAAAA,aAAD;AAAgBQ,MAAAA,MAAhB;AAAwBD,MAAAA,WAAxB;AAAqCmD,MAAAA,WAArC;AAAkDzD,MAAAA,WAAlD;AAA+DgB,MAAAA,WAA/D;AAA4E2C,MAAAA,IAA5E;AAAkF9D,MAAAA,YAAlF;AAAgGC,MAAAA,WAAhG;AAA6GO,MAAAA,qBAA7G;AAAoIf,MAAAA;AAApI,QAAuJ,KAAKC,KAAlK;AACA,WAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,MAAD;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,QAAQ,EAAE,KAFZ;AAGE,MAAA,OAAO,EAAEkE,WAHX;AAIE,MAAA,OAAO,EAAE,KAAKkB,cAAL,CAAoBlC,IAApB,CAAyB,IAAzB;AAJX,MADF,CAFF,EAWE;AAAK,MAAA,SAAS,EAAC;AAAf,OACG,KAAKmC,WAAL,CAAiBtE,WAAjB,CADH,CAXF,EAeE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAM,MAAA,SAAS,EAAC;AAAhB,OACI;AAAG,MAAA,SAAS,EAAC,4BAAb;AAA0C,oBAAW,MAArD;AACG,MAAA,OAAO,EAAE,KAAKqE,cAAL,CAAoBlC,IAApB,CAAyB,IAAzB;AADZ,MADJ,CADF,EAKE,MAAC,eAAD;AAAiB,MAAA,WAAW,EAAC,cAA7B;AAA4C,MAAA,IAAI,EAAE,KAAKlD,KAAL,CAAWoE,IAA7D;AACiB,MAAA,QAAQ,EAAE,KAAKY,YAAL,CAAkB9B,IAAlB,CAAuB,IAAvB,CAD3B;AAEiB,MAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWiE;AAFnC,MALF,CADF,EAYE;AAAK,MAAA,SAAS,EAAC;AAAf,OAEGjD,MAAM,GACL;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,gBAAD,OADF,CADK,GAIH,KAAKsE,WAAL,CAAiBvE,WAAjB,EAA8BN,WAA9B,EAA2CK,qBAA3C,CANN,EAQE,MAAC,WAAD;AAAa,MAAA,IAAI,EAAEW,WAAnB;AAAgC,MAAA,IAAI,EAAE2C,IAAtC;AACa,MAAA,OAAO,EAAE,KAAKxC,kBAAL,CAAwBsB,IAAxB,CAA6B,IAA7B,CADtB;AAEa,MAAA,UAAU,EAAE,KAAK4B,UAAL,CAAgB5B,IAAhB,CAAqB,IAArB;AAFzB,MARF,CAZF,CAfF,CADF,EA2CE,MAAC,OAAD;AAAS,MAAA,IAAI,EAAEnD,eAAf;AAAgC,MAAA,aAAa,EAAE,KAAKwF,aAApD;AACY,MAAA,cAAc,EAAE,KAAKC,cADjC;AACiD,MAAA,eAAe,EAAE,KAAKC;AADvE,MA3CF,EA6CGlF,WAAW,IAAInC,OAAO,CAACsH,IAAR,CAAa;AAAM,MAAA,EAAE,EAAC;AAAT,OAAuBpF,YAAvB,CAAb,EAA0D,CAA1D,EAA6D,KAAKsB,kBAAlE,CA7ClB,CAFF;AAkDD;;AA7mB8B;;AAgnBjC,eAAezC,IAAf","sourcesContent":["import React, {PureComponent} from \"react\";\r\nimport {Button, Checkbox, Drawer, Dropdown, Menu, message} from \"antd\";\r\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\r\nimport axios from 'axios'\r\n\r\nimport mails from \"./data/mails\";\r\nimport folders from \"./data/folders\";\r\nimport filters from \"./data/filters\";\r\nimport labels from \"./data/labels\";\r\nimport options from \"./data/options\";\r\nimport MailList from \"../../app/components/mail/MailList\";\r\nimport ComposeMail from \"../../app/components/mail/Compose\";\r\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\r\nimport MailDetail from \"../../app/components/mail/MailDetail\";\r\nimport IntlMessages from \"../../util/IntlMessages\";\r\nimport CircularProgress from \"../../app/components/CircularProgress\";\r\n\r\nimport './index.css';\r\nimport AddMail from \"../../app/components/mail/addMail\";\r\n\r\n\r\nclass Mail extends PureComponent {\r\n  MailSideBar = (mail) => {\r\n    return <div className=\"gx-module-side\">\r\n      <div className=\"gx-module-side-header\">\r\n      </div>\r\n\r\n      <div className=\"gx-module-side-content\">\r\n        <CustomScrollbars className=\"gx-module-side-scroll\">\r\n          <div className=\"gx-module-add-task\">\r\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\r\n                    onClick={this.onAddContact}>\r\n              <i className=\"icon icon-add gx-mr-2\"/>\r\n              <span>Add New Banner</span>\r\n            </Button>\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n\r\n  };\r\n  onAddContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n\r\n  onDeleteMail = () => {\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: 4, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      alertMessage: 'Mail Deleted Successfully',\r\n      showMessage: true,\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  getNavFolders = () => {\r\n    return folders.map((folder, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.folder === folder.id);\r\n        this.setState({\r\n          selectedFolder: folder.id,\r\n          noContentFoundMessage: 'No Mail found in selected folder',\r\n          currentMail: null,\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className={`${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`}>\r\n          <i className={`icon icon-${folder.icon}`}/>\r\n          <span>{folder.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n\r\n\r\n  onFolderMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: id, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      noContentFoundMessage: 'No Mail found in selected folder',\r\n      alertMessage: 'Mail has been moved successfully',\r\n      showMessage: true,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  onLabelMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const mails = this.state.allMail.map(mail => {\r\n        if (mail.selected && (mail.folder === this.state.selectedFolder)) {\r\n          if (mail.labels.includes(id)) {\r\n            return {...mail, labels: this.removeLabel(mail, id)};\r\n          } else {\r\n            return {...mail, labels: this.addLabel(mail, id)};\r\n          }\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      noContentFoundMessage: 'No Mail found in selected label',\r\n      alertMessage: 'Label Updated Successfully',\r\n      showMessage: true,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      composeMail: false,\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getNavFilters = () => {\r\n    return filters.map((filter, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => {\r\n          if (filter.id === 0 && mail.starred && mail.folder === this.state.selectedFolder) {\r\n            return mail\r\n          } else if (filter.id === 1 && mail.important && mail.folder === this.state.selectedFolder) {\r\n            return mail\r\n          }\r\n          return null;\r\n        });\r\n        this.setState({\r\n          noContentFoundMessage: 'No Mail found in selected filter',\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-${filter.icon}`}/>\r\n          <span>{filter.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  onOptionMenuItemSelect = (e) => {\r\n    switch (e.key) {\r\n      case 'All':\r\n        this.handleRequestClose();\r\n        this.getAllMail();\r\n        break;\r\n      case 'None':\r\n        this.handleRequestClose();\r\n        this.getUnselectedAllMail();\r\n        break;\r\n      case 'Read':\r\n        this.handleRequestClose();\r\n        this.getReadMail();\r\n        break;\r\n      case 'Unread':\r\n        this.handleRequestClose();\r\n        this.getUnreadMail();\r\n        break;\r\n      case 'Starred':\r\n        this.handleRequestClose();\r\n        this.getStarredMail();\r\n        break;\r\n      case 'Unstarred':\r\n        this.handleRequestClose();\r\n        this.getUnStarredMail();\r\n        break;\r\n      case 'Important':\r\n        this.handleRequestClose();\r\n        this.getImportantMail();\r\n        break;\r\n      case 'Unimportant':\r\n        this.handleRequestClose();\r\n        this.getUnimportantMail();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  onDeleteContact = async (data) => {\r\n    const res = await axios.delete('http://localhost:8000/banner/' + data._id)\r\n    console.log(res.data)\r\n    this.render()\r\n\r\n  };\r\n  getAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: true\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: mails.length,\r\n      allMail: mails,\r\n      optionName: 'All',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getUnselectedAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: false\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      optionName: 'None',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getReadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Read',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnreadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Unread',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Starred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'UnStarred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getImportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Important',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnimportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Unimportant',\r\n      noContentFoundMessage: 'No Mail found in selected Label',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getNavLabels = () => {\r\n    return labels.map((label, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.labels.includes(label.id) && mail.folder === this.state.selectedFolder);\r\n        this.setState({\r\n          loader: true,\r\n          noContentFoundMessage: 'No Mail found in selected label',\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-tag gx-text-${label.color}`}/>\r\n          <span>{label.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  searchMail = (searchText) => {\r\n    if (searchText === '') {\r\n      this.setState({folderMails: this.state.allMail.filter((mail) => !mail.deleted)});\r\n    } else {\r\n      const searchMails = this.state.allMail.filter((mail) =>\r\n        mail.title.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n      this.setState({\r\n        folderMails: searchMails\r\n      });\r\n    }\r\n  };\r\n  async onDeleteMail(data){\r\n    console.log(data)\r\n    const res = await axios.delete('http://localhost:8000/banner/' + data._id)\r\n    console.log(res.data)\r\n\r\n  }\r\n  displayMail = (currentMail, folderMails, noContentFoundMessage) => {\r\n    return (<div className=\"gx-module-box-column\">\r\n      {currentMail === null ?\r\n        folderMails.length === 0 ?\r\n          <div className=\"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\">\r\n            {noContentFoundMessage}\r\n          </div>\r\n          :\r\n          <MailList mails={folderMails} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onMailSelect={this.onMailSelect.bind(this)}\r\n                    onMailChecked={this.onMailChecked.bind(this)}\r\n                    onDeleteMail={this.onDeleteMail.bind(this)}/>\r\n        :\r\n        <MailDetail mail={currentMail} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onImportantSelect={this.onImportantSelect.bind(this)}/>}\r\n    </div>)\r\n  };\r\n  getMailActions = () => {\r\n    return <div className=\"gx-flex-row gx-align-items-center\">\r\n\r\n      <Dropdown overlay={this.folderMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-folder gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <Dropdown overlay={this.labelMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-tag gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <span onClick={this.onDeleteMail.bind(this)}>\r\n        <i className=\"icon icon-trash gx-icon-btn\"/></span>\r\n\r\n    </div>\r\n  };\r\n\r\n  optionMenu = () => (\r\n    <Menu id=\"option-menu\"\r\n          onClick={this.onOptionMenuItemSelect.bind(this)}>\r\n      {options.map(option =>\r\n        <Menu.Item key={option.title}>\r\n          {option.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  folderMenu = () => (\r\n    <Menu id=\"folder-menu\"\r\n          onClick={this.onFolderMenuItemSelect.bind(this)}>\r\n      {folders.map(folder =>\r\n        <Menu.Item key={folder.id}>\r\n          {folder.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  labelMenu = () => (\r\n    <Menu id=\"label-menu\"\r\n          onClick={this.onLabelMenuItemSelect.bind(this)}>\r\n      {labels.map(label =>\r\n        <Menu.Item key={label.id}>\r\n          {label.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchMail: '',\r\n      addContactState: false,\r\n      noContentFoundMessage: 'No Mail found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      drawerState: false,\r\n      optionName: 'None',\r\n      anchorEl: null,\r\n      allMail: mails,\r\n      loader: true,\r\n      currentMail: null,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert@example.com',\r\n        avatar: 'https://via.placeholder.com/150x150'\r\n      },\r\n      selectedMails: 0,\r\n      selectedFolder: 0,\r\n      composeMail: false,\r\n      folderMails: mails.filter(mail => mail.folder === 0)\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const result = await axios.get('http://localhost:8000/banner')\r\n    console.log(result.data)\r\n\r\n    this.setState({loader: false, folderMails: result.data, allMail: result.data})\r\n  }\r\n\r\n\r\n  onMailChecked(data) {\r\n    data.selected = !data.selected;\r\n    let selectedMail = 0;\r\n    const mails = this.state.folderMails.map(mail => {\r\n        if (mail.selected) {\r\n          selectedMail++;\r\n        }\r\n        if (mail.id === data.id) {\r\n          if (mail.selected) {\r\n            selectedMail++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      folderMails: mails\r\n    });\r\n  }\r\n\r\n  onAllMailSelect() {\r\n    const selectAll = this.state.selectedMails <= this.state.folderMails.length;\r\n    if (selectAll) {\r\n      this.getAllMail();\r\n    } else {\r\n      this.getUnselectedAllMail();\r\n    }\r\n  }\r\n\r\n  removeLabel(mail, label) {\r\n    mail.labels.splice(mail.labels.indexOf(label), 1);\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels}\r\n      })\r\n    }\r\n    return mail.labels;\r\n  }\r\n\r\n  onStartSelect(data) {\r\n    data.starred = !data.starred;\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onImportantSelect(data) {\r\n    data.important = !data.important;\r\n    this.setState({\r\n      alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onSaveContact = async (data)=>{\r\n    const formData = new FormData()\r\n    formData.append(\r\n      'file',\r\n      data.imgUrl\r\n    )\r\n    const res = await axios.post('http://localhost:8000/banner/upload')\r\n    console.log(res)\r\n/*     const result = await axios.post('http://localhost:8000/banner', data)\r\n    this.setState({onAddContact: false, folderMails: [...this.folderMails, result]}) */\r\n  }\r\n\r\n  onMailSend(data) {\r\n    this.setState(\r\n      {\r\n        alertMessage: 'Mail Sent Successfully',\r\n        showMessage: true,\r\n        folderMails: this.state.allMail.concat(data),\r\n        allMail: this.state.allMail.concat(data)\r\n      }\r\n    );\r\n  }\r\n\r\n  onMailSelect(mail) {\r\n    this.setState({\r\n      loader: true,\r\n      currentMail: mail,\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n  addLabel(mail, label) {\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels.concat(label)}\r\n      })\r\n    }\r\n    return mail.labels.concat(label)\r\n  }\r\n\r\n  updateSearch(evt) {\r\n    this.setState({\r\n      searchMail: evt.target.value,\r\n    });\r\n    this.searchMail(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {selectedMails, loader, currentMail, drawerState, folderMails, composeMail, user, alertMessage, showMessage, noContentFoundMessage, addContactState} = this.state;\r\n    return (\r\n\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module\">\r\n\r\n          <div className=\"gx-d-block gx-d-lg-none\">\r\n            <Drawer\r\n              placement=\"left\"\r\n              closable={false}\r\n              visible={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n            </Drawer>\r\n\r\n          </div>\r\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\r\n            {this.MailSideBar(currentMail)}\r\n          </div> \r\n\r\n          <div className=\"gx-module-box\">\r\n            <div className=\"gx-module-box-header\">\r\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\r\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\r\n                     onClick={this.onToggleDrawer.bind(this)}/>\r\n              </span>\r\n              <AppModuleHeader placeholder=\"Search mails\" user={this.state.user}\r\n                               onChange={this.updateSearch.bind(this)}\r\n                               value={this.state.searchMail}/>\r\n\r\n            </div>\r\n\r\n            <div className=\"gx-module-box-content\">\r\n\r\n              {loader ?\r\n                <div className=\"gx-loader-view\">\r\n                  <CircularProgress/>\r\n                </div>\r\n                : this.displayMail(currentMail, folderMails, noContentFoundMessage)}\r\n\r\n              <ComposeMail open={composeMail} user={user}\r\n                           onClose={this.handleRequestClose.bind(this)}\r\n                           onMailSend={this.onMailSend.bind(this)}/>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <AddMail open={addContactState} onSaveContact={this.onSaveContact}\r\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\r\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Mail;\r\n"]},"metadata":{},"sourceType":"module"}