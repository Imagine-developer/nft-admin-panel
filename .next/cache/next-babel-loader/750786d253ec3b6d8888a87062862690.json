{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Avatar, Input, Modal } from \"antd\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\nclass AddMail extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSelectFile\", e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    });\n\n    _defineProperty(this, \"onImageLoaded\", image => {\n      this.imageRef = image;\n    });\n\n    _defineProperty(this, \"onCropComplete\", crop => {\n      this.makeClientCrop(crop);\n    });\n\n    _defineProperty(this, \"onCropChange\", (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    });\n\n    this.state = {\n      title: '',\n      subtitle: '',\n      text: '',\n      imgUrl: '',\n      url: '',\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg', 1);\n    });\n  }\n\n  render() {\n    const {\n      onSaveContact,\n      onContactClose,\n      open,\n      currentMail\n    } = this.props;\n    const {\n      title,\n      text,\n      imgUrl,\n      url,\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return __jsx(Modal, {\n      title: __jsx(IntlMessages, {\n        id: \"contact.addContact\"\n      }),\n      toggle: onContactClose,\n      visible: open,\n      closable: false,\n      onOk: () => {\n        if (title === '') return;\n        onContactClose();\n        onSaveContact({\n          'title': title,\n          'text': text,\n          'url': url,\n          'imgUrl': imgUrl\n        });\n        this.setState({\n          title: '',\n          text: '',\n          imgUrl: '',\n          url: ''\n        });\n      },\n      onCancel: onContactClose\n    }, __jsx(\"div\", {\n      className: \"gx-modal-box-row\"\n    }, __jsx(\"div\", {\n      className: \"gx-modal-box-form-item\"\n    }, __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(Input, {\n      required: true,\n      placeholder: \"title\",\n      onChange: event => this.setState({\n        title: event.target.value\n      }),\n      defaultValue: title,\n      margin: \"none\"\n    })), __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(Input, {\n      placeholder: \"text\",\n      onChange: event => this.setState({\n        text: event.target.value\n      }),\n      value: text,\n      margin: \"normal\"\n    })), __jsx(\"div\", {\n      className: \"gx-form-group\"\n    }, __jsx(TextArea, {\n      placeholder: \"url\",\n      onChange: event => this.setState({\n        url: event.target.value\n      }),\n      value: url,\n      margin: \"normal\"\n    })), __jsx(\"div\", null, __jsx(Input, {\n      type: \"file\",\n      onChange: event => this.setState({\n        imgUrl: event.target.files[0]\n      })\n    })))));\n  }\n\n}\n\nexport default AddMail;","map":null,"metadata":{},"sourceType":"module"}