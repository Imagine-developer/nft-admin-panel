{"ast":null,"code":"var _jsxFileName = \"/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Admins/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport contactList from '../../routes/Contact/data/contactList';\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddAdmin\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios';\nimport './index.css';\nlet contactId = 723812738;\n\nclass Contact extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"ContactSideBar\", user => {\n      return __jsx(\"div\", {\n        className: \"gx-module-side\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 12\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-module-side-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 7\n        }\n      }, __jsx(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: this.onAddContact,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 23\n        }\n      }, __jsx(\"i\", {\n        className: \"icon icon-add gx-mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }\n      }), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }\n      }, \"Add New Admin\"))));\n    });\n\n    _defineProperty(this, \"onContactSelect\", data => {\n      data.selected = !data.selected;\n      let selectedContacts = 0;\n      const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n      this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(this, \"onAddContact\", () => {\n      this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(this, \"onContactClose\", () => {\n      this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(this, \"onSaveContact\", async data => {\n      const admin = await axios.post('https://desolate-inlet-76011.herokuapp.com/admin/register', data);\n      this.setState({\n        contactList: [...this.state.contactList, data],\n        alertMessage: 'Users Updated Successfully',\n        showMessage: true,\n        allContact: [...this.state.contactList, data]\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n    });\n\n    _defineProperty(this, \"onDeleteContact\", async data => {\n      const res = await axios.delete('https://desolate-inlet-76011.herokuapp.com/user/' + data._id);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: this.state.allContact.filter(contact => contact._id !== data._id),\n        contactList: this.state.allContact.filter(contact => contact._id !== data._id)\n      });\n    });\n\n    _defineProperty(this, \"onDeleteSelectedContact\", () => {\n      const contacts = this.state.allContact.filter(contact => !contact.selected);\n      this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    });\n\n    _defineProperty(this, \"filterContact\", userName => {\n      const {\n        filterOption\n      } = this.state;\n\n      if (userName === '') {\n        this.setState({\n          contactList: this.state.allContact\n        });\n      } else {\n        const filterContact = this.state.allContact.filter(contact => contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n\n        if (filterOption === 'All contacts') {\n          this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.frequently)\n          });\n        } else if (filterOption === 'Starred contacts') {\n          this.setState({\n            contactList: filterContact.filter(contact => contact.starred)\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        showMessage: false\n      });\n    });\n\n    _defineProperty(this, \"getAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: true\n      }) : contact);\n      this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    _defineProperty(this, \"getUnselectedAllContact\", () => {\n      let contactList = this.state.allContact.map(contact => contact ? _objectSpread(_objectSpread({}, contact), {}, {\n        selected: false\n      }) : contact);\n      this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    });\n\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value\n    });\n    this.filterContact(evt.target.value);\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      user,\n      contactList,\n      addContactState,\n      drawerState,\n      selectedContacts,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage\n    } = this.state;\n    console.log(contactList);\n    return __jsx(\"div\", {\n      className: \"gx-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-app-module\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, this.ContactSideBar())), __jsx(\"div\", {\n      className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 12\n      }\n    }, this.ContactSideBar(user)), __jsx(\"div\", {\n      className: \"gx-module-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }, __jsx(\"i\", {\n      className: \"icon icon-menu gx-icon-btn\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 19\n      }\n    })), __jsx(AppModuleHeader, {\n      placeholder: \"Search contact\",\n      notification: false,\n      apps: false,\n      user: this.state.user,\n      onChange: this.updateContactUser.bind(this),\n      value: this.state.searchUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"gx-module-box-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, __jsx(CustomScrollbars, {\n      className: \"gx-module-content-scroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    }, contactList.length === 0 ? __jsx(\"div\", {\n      className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    }, noContentFoundMessage) : __jsx(ContactList, {\n      contactList: contactList,\n      onContactSelect: this.onContactSelect.bind(this),\n      onDeleteContact: this.onDeleteContact.bind(this),\n      onSaveContact: this.onSaveContact.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }))))), __jsx(AddContact, {\n      open: addContactState,\n      contact: {\n        'id': contactId++,\n        'name': '',\n        'thumb': '',\n        'email': '',\n        'phone': '',\n        'designation': '',\n        'selected': false,\n        'starred': false,\n        'frequently': false\n      },\n      onSaveContact: this.onSaveContact,\n      onContactClose: this.onContactClose,\n      onDeleteContact: this.onDeleteContact,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }), showMessage && message.info(__jsx(\"span\", {\n      id: \"message-id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 38\n      }\n    }, alertMessage), 3, this.handleRequestClose));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Admins/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","axios","contactId","Contact","constructor","user","onAddContact","data","selected","selectedContacts","state","map","contact","id","setState","addContactState","admin","post","alertMessage","showMessage","allContact","res","delete","_id","filter","contacts","userName","filterOption","filterContact","name","toLowerCase","indexOf","frequently","starred","length","noContentFoundMessage","selectedSectionId","drawerState","email","avatar","searchUser","selectedContact","onAllContactSelect","selectAll","getAllContact","getUnselectedAllContact","updateContactUser","evt","target","value","onToggleDrawer","render","console","log","bind","ContactSideBar","onContactSelect","onDeleteContact","onSaveContact","onContactClose","info","handleRequestClose"],"mappings":"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","sourcesContent":["\nimport React, {Component} from \"react\";\nimport {Button, Checkbox, Drawer, message} from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\n\nimport contactList from '../../routes/Contact/data/contactList'\nimport ContactList from \"../../app/components/contact/ContactList\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport AddContact from \"../../app/components/contact/AddAdmin\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport axios from 'axios'\nimport './index.css';\n\nlet contactId = 723812738;\n\nclass Contact extends Component {\n\n\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n                      <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New Admin</span>\n            </Button>\n      </div>\n    </div>\n\n  };\n\n  onContactSelect = (data) => {\n    data.selected = !data.selected;\n    let selectedContacts = 0;\n    const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n          return data;\n        } else {\n          return contact;\n        }\n      }\n    );\n    this.setState({\n      selectedContacts: selectedContacts,\n      contactList: contactList\n    });\n\n  };\n\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onSaveContact = async (data) => {\n    const admin = await axios.post('https://desolate-inlet-76011.herokuapp.com/admin/register', data)\n      this.setState({contactList: [...this.state.contactList, data],\n        alertMessage: 'Users Updated Successfully',\n        showMessage: true,\n      allContact: [...this.state.contactList, data]})\n\n\n    // this.onFilterOptionSelect(this.state.filterOption);\n  };\n  onDeleteContact = async (data) => {\n    const res = await axios.delete('https://desolate-inlet-76011.herokuapp.com/user/' + data._id)\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: this.state.allContact.filter((contact) => contact._id !== data._id),\n      contactList: this.state.allContact.filter((contact) => contact._id !== data._id)\n    })\n  };\n  onDeleteSelectedContact = () => {\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: contacts,\n      contactList: contacts,\n      selectedContacts: 0\n    })\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = this.state.allContact.filter((contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n  getAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: true\n    } : contact);\n    this.setState({\n      selectedContacts: contactList.length,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n  getUnselectedAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: false\n    } : contact);\n    this.setState({\n      selectedContacts: 0,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false,\n    }\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    console.log(contactList)\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n           <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div> \n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n                {contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 onContactSelect={this.onContactSelect.bind(this)}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}