{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Avatar, Input, Modal } from \"antd\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\nvar AddMail = /*#__PURE__*/function (_React$Component) {\n  _inherits(AddMail, _React$Component);\n\n  var _super = _createSuper(AddMail);\n\n  function AddMail(props) {\n    var _this;\n\n    _classCallCheck(this, AddMail);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectFile\", function (e) {\n      if (e.target.files && e.target.files.length > 0) {\n        var reader = new FileReader();\n        reader.addEventListener('load', function () {\n          return _this.setState({\n            src: reader.result\n          });\n        });\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onImageLoaded\", function (image) {\n      _this.imageRef = image;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCropComplete\", function (crop) {\n      _this.makeClientCrop(crop);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCropChange\", function (crop, percentCrop) {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      _this.setState({\n        crop: crop\n      });\n    });\n\n    _this.state = {\n      title: '',\n      subtitle: '',\n      text: '',\n      imgUrl: '',\n      url: '',\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n    return _this;\n  }\n\n  _createClass(AddMail, [{\n    key: \"makeClientCrop\",\n    value: function () {\n      var _makeClientCrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop) {\n        var croppedImageUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.imageRef && crop.width && crop.height)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n\n              case 3:\n                croppedImageUrl = _context.sent;\n                this.setState({\n                  croppedImageUrl: croppedImageUrl\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function makeClientCrop(_x) {\n        return _makeClientCrop.apply(this, arguments);\n      }\n\n      return makeClientCrop;\n    }()\n  }, {\n    key: \"getCroppedImg\",\n    value: function getCroppedImg(image, crop, fileName) {\n      var _this2 = this;\n\n      var canvas = document.createElement('canvas');\n      var pixelRatio = window.devicePixelRatio;\n      var scaleX = image.naturalWidth / image.width;\n      var scaleY = image.naturalHeight / image.height;\n      var ctx = canvas.getContext('2d');\n      canvas.width = crop.width * pixelRatio * scaleX;\n      canvas.height = crop.height * pixelRatio * scaleY;\n      ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      ctx.imageSmoothingQuality = 'high';\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n      return new Promise(function (resolve, reject) {\n        canvas.toBlob(function (blob) {\n          if (!blob) {\n            //reject(new Error('Canvas is empty'));\n            console.error('Canvas is empty');\n            return;\n          }\n\n          blob.name = fileName;\n          window.URL.revokeObjectURL(_this2.fileUrl);\n          _this2.fileUrl = window.URL.createObjectURL(blob);\n          resolve(_this2.fileUrl);\n        }, 'image/jpeg', 1);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          onSaveContact = _this$props.onSaveContact,\n          onContactClose = _this$props.onContactClose,\n          open = _this$props.open,\n          currentMail = _this$props.currentMail;\n      var _this$state = this.state,\n          title = _this$state.title,\n          text = _this$state.text,\n          imgUrl = _this$state.imgUrl,\n          url = _this$state.url,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          src = _this$state.src;\n      return __jsx(Modal, {\n        title: __jsx(IntlMessages, {\n          id: \"contact.addContact\"\n        }),\n        toggle: onContactClose,\n        visible: open,\n        closable: false,\n        onOk: function onOk() {\n          if (title === '') return;\n          onContactClose();\n          onSaveContact({\n            'title': title,\n            'text': text,\n            'url': url,\n            'imgUrl': imgUrl\n          });\n\n          _this3.setState({\n            title: '',\n            text: '',\n            imgUrl: '',\n            url: ''\n          });\n        },\n        onCancel: onContactClose\n      }, __jsx(\"div\", {\n        className: \"gx-modal-box-row\"\n      }, __jsx(\"div\", {\n        className: \"gx-modal-box-form-item\"\n      }, __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        required: true,\n        placeholder: \"title\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            title: event.target.value\n          });\n        },\n        defaultValue: title,\n        margin: \"none\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(Input, {\n        placeholder: \"text\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            text: event.target.value\n          });\n        },\n        value: text,\n        margin: \"normal\"\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\"\n      }, __jsx(TextArea, {\n        placeholder: \"url\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            url: event.target.value\n          });\n        },\n        value: url,\n        margin: \"normal\"\n      })), __jsx(\"div\", null, __jsx(Input, {\n        type: \"file\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            imgUrl: event.target.files[0]\n          });\n        }\n      })))));\n    }\n  }]);\n\n  return AddMail;\n}(React.Component);\n\nexport default AddMail;","map":null,"metadata":{},"sourceType":"module"}