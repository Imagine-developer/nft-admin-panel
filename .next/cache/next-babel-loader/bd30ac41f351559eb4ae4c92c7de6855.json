{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/components/mail/addMail/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Avatar, Input, Modal } from \"antd\";\nimport IntlMessages from \"../../../../util/IntlMessages\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\nvar AddMail = /*#__PURE__*/function (_React$Component) {\n  _inherits(AddMail, _React$Component);\n\n  var _super = _createSuper(AddMail);\n\n  function AddMail(props) {\n    var _this;\n\n    _classCallCheck(this, AddMail);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectFile\", function (e) {\n      if (e.target.files && e.target.files.length > 0) {\n        var reader = new FileReader();\n        reader.addEventListener('load', function () {\n          return _this.setState({\n            src: reader.result\n          });\n        });\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onImageLoaded\", function (image) {\n      _this.imageRef = image;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCropComplete\", function (crop) {\n      _this.makeClientCrop(crop);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCropChange\", function (crop, percentCrop) {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      _this.setState({\n        crop: crop\n      });\n    });\n\n    _this.state = {\n      title: '',\n      subtitle: '',\n      text: '',\n      imgUrl: '',\n      url: '',\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n    return _this;\n  }\n\n  _createClass(AddMail, [{\n    key: \"makeClientCrop\",\n    value: function () {\n      var _makeClientCrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop) {\n        var croppedImageUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.imageRef && crop.width && crop.height)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n\n              case 3:\n                croppedImageUrl = _context.sent;\n                this.setState({\n                  croppedImageUrl: croppedImageUrl\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function makeClientCrop(_x) {\n        return _makeClientCrop.apply(this, arguments);\n      }\n\n      return makeClientCrop;\n    }()\n  }, {\n    key: \"getCroppedImg\",\n    value: function getCroppedImg(image, crop, fileName) {\n      var _this2 = this;\n\n      var canvas = document.createElement('canvas');\n      var pixelRatio = window.devicePixelRatio;\n      var scaleX = image.naturalWidth / image.width;\n      var scaleY = image.naturalHeight / image.height;\n      var ctx = canvas.getContext('2d');\n      canvas.width = crop.width * pixelRatio * scaleX;\n      canvas.height = crop.height * pixelRatio * scaleY;\n      ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      ctx.imageSmoothingQuality = 'high';\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n      return new Promise(function (resolve, reject) {\n        canvas.toBlob(function (blob) {\n          if (!blob) {\n            //reject(new Error('Canvas is empty'));\n            console.error('Canvas is empty');\n            return;\n          }\n\n          blob.name = fileName;\n          window.URL.revokeObjectURL(_this2.fileUrl);\n          _this2.fileUrl = window.URL.createObjectURL(blob);\n          resolve(_this2.fileUrl);\n        }, 'image/jpeg', 1);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          onSaveContact = _this$props.onSaveContact,\n          onContactClose = _this$props.onContactClose,\n          open = _this$props.open,\n          currentMail = _this$props.currentMail;\n      var _this$state = this.state,\n          title = _this$state.title,\n          text = _this$state.text,\n          imgUrl = _this$state.imgUrl,\n          url = _this$state.url,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          src = _this$state.src;\n      return __jsx(Modal, {\n        title: __jsx(IntlMessages, {\n          id: \"contact.addContact\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }\n        }),\n        toggle: onContactClose,\n        visible: open,\n        closable: false,\n        onOk: function onOk() {\n          if (title === '') return;\n          onContactClose();\n          onSaveContact({\n            'title': title,\n            'text': text,\n            'url': url,\n            'imgUrl': imgUrl\n          });\n\n          _this3.setState({\n            title: '',\n            text: '',\n            imgUrl: '',\n            url: ''\n          });\n        },\n        onCancel: onContactClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-modal-box-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-modal-box-form-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"gx-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, __jsx(Input, {\n        required: true,\n        placeholder: \"title\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            title: event.target.value\n          });\n        },\n        defaultValue: title,\n        margin: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, __jsx(Input, {\n        placeholder: \"text\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            text: event.target.value\n          });\n        },\n        value: text,\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"gx-form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }\n      }, __jsx(TextArea, {\n        placeholder: \"url\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            url: event.target.value\n          });\n        },\n        value: url,\n        margin: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, __jsx(Input, {\n        type: \"file\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            imgUrl: event.target.files[0]\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return AddMail;\n}(React.Component);\n\nexport default AddMail;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/components/mail/addMail/index.js"],"names":["React","Avatar","Input","Modal","IntlMessages","TextArea","AddMail","props","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","image","imageRef","crop","makeClientCrop","percentCrop","state","title","subtitle","text","imgUrl","url","unit","width","aspect","height","getCroppedImg","croppedImageUrl","fileName","canvas","document","createElement","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","URL","revokeObjectURL","fileUrl","createObjectURL","onSaveContact","onContactClose","open","currentMail","event","value","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Avatar, Input, Modal} from \"antd\";\n\nimport IntlMessages from \"../../../../util/IntlMessages\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\nclass AddMail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      subtitle: '',\n      text: '',\n      imgUrl: '',\n      url: '',\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    }\n  }\n  onSelectFile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n  onImageLoaded = (image) => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = (crop) => {\n    this.makeClientCrop(crop);\n  };\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          if (!blob) {\n            //reject(new Error('Canvas is empty'));\n            console.error('Canvas is empty');\n            return;\n          }\n          blob.name = fileName;\n          window.URL.revokeObjectURL(this.fileUrl);\n          this.fileUrl = window.URL.createObjectURL(blob);\n          resolve(this.fileUrl);\n        },\n        'image/jpeg',\n        1\n      );\n    });\n  }\n  \n\n  render() {\n    const {onSaveContact, onContactClose, open, currentMail} = this.props;\n    const {title, text, imgUrl, url, crop, croppedImageUrl, src} = this.state;\n    return (\n      <Modal\n        title={\n          <IntlMessages id=\"contact.addContact\"/>}\n        toggle={onContactClose} visible={open}\n        closable={false}\n        onOk={() => {\n            if (title === '') return;\n          onContactClose();\n          onSaveContact({\n              'title': title,\n              'text': text,\n              'url': url,\n              'imgUrl': imgUrl\n          });\n          this.setState({\n              title: '',\n              text: '',\n              imgUrl: '',\n              url: ''\n          })\n\n        }}\n        onCancel={onContactClose}>\n\n        <div className=\"gx-modal-box-row\">\n\n          <div className=\"gx-modal-box-form-item\">\n            <div className=\"gx-form-group\">\n              <Input\n                required\n                placeholder=\"title\"\n                onChange={(event) => this.setState({title: event.target.value})}\n                defaultValue={title}\n                margin=\"none\"/>\n            </div>\n            <div className=\"gx-form-group\">\n              <Input\n                placeholder=\"text\"\n                onChange={(event) => this.setState({text: event.target.value})}\n                value={text}\n                margin=\"normal\"\n              />\n            </div>\n            <div className=\"gx-form-group\">\n              <TextArea\n                placeholder=\"url\"\n                onChange={(event) => this.setState({url: event.target.value})}\n                value={url}\n                margin=\"normal\"\n              />\n            </div>\n            <div>\n              <Input\n                type='file'\n                onChange={(event) => this.setState({imgUrl: event.target.files[0]})}\n              />\n            </div>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default AddMail;\n"]},"metadata":{},"sourceType":"module"}