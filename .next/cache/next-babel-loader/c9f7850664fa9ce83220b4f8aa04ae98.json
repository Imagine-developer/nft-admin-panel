{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar connectMetaMask = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var userAddress, web3;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context2.next = 17;\n              break;\n            }\n\n            _context2.next = 3;\n            return new Web3(window.ethereum);\n\n          case 3:\n            web3 = _context2.sent;\n            console.log(\"connect MetaMask\");\n            _context2.prev = 5;\n            _context2.next = 8;\n            return window.ethereum.enable().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      // User has allowed account access to DApp...\n                      console.log(\"step2\");\n\n                      if (web3) {\n                        if (window.ethereum.selectedAddress !== undefined) {\n                          userAddress = window.ethereum.selectedAddress;\n                        } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n                          userAddress = web3.givenProvider.MetamaskInpageProvider;\n                        } else if (web3.givenProvider.selectedAddress !== undefined) {\n                          userAddress = web3.givenProvider.selectedAddress;\n                        }\n                      }\n\n                    case 2:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            })));\n\n          case 8:\n            console.log(\"userAddress: \", userAddress);\n            return _context2.abrupt(\"return\", {\n              userAddress: userAddress,\n              web3: web3\n            });\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](5);\n            // User has denied account access to DApp...\n            console.log(_context2.t0);\n\n          case 15:\n            _context2.next = 28;\n            break;\n\n          case 17:\n            if (!window.web3) {\n              _context2.next = 27;\n              break;\n            }\n\n            _context2.next = 20;\n            return new Web3(web3.currentProvider);\n\n          case 20:\n            web3 = _context2.sent;\n            console.log(web3);\n            console.log(\"connect MetaMask\");\n\n            if (web3) {\n              if (window.ethereum.selectedAddress !== undefined) {\n                userAddress = window.ethereum.selectedAddress;\n              } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n                userAddress = web3.givenProvider.MetamaskInpageProvider;\n              } else if (web3.givenProvider.selectedAddress !== undefined) {\n                userAddress = web3.givenProvider.selectedAddress;\n              }\n\n              console.log(\"userAddress: \", userAddress);\n            }\n\n            return _context2.abrupt(\"return\", {\n              userAddress: userAddress,\n              web3: web3\n            });\n\n          case 27:\n            console.log(\"You have to install MetaMask !\");\n\n          case 28:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[5, 12]]);\n  }));\n\n  return function connectMetaMask() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default connectMetaMask;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Tokens/metamask.js"],"names":["Web3","connectMetaMask","window","ethereum","web3","console","log","enable","then","selectedAddress","undefined","userAddress","givenProvider","MetamaskInpageProvider","currentProvider"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,eAAe;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAElBC,MAAM,CAACC,QAFW;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGP,IAAIH,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAHO;;AAAA;AAGpBC,YAAAA,IAHoB;AAIpBC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAJoB;AAAA;AAAA,mBAOZJ,MAAM,CAACC,QAAP,CAAgBI,MAAhB,GAAyBC,IAAzB,wEAA8B;AAAA;AAAA;AAAA;AAAA;AAClC;AACAH,sBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,0BAAIF,IAAJ,EAAU;AACR,4BAAIF,MAAM,CAACC,QAAP,CAAgBM,eAAhB,KAAoCC,SAAxC,EAAmD;AACjDC,0BAAAA,WAAW,GAAGT,MAAM,CAACC,QAAP,CAAgBM,eAA9B;AACD,yBAFD,MAEO,IAAIL,IAAI,CAACQ,aAAL,CAAmBC,sBAAnB,KAA8CH,SAAlD,EAA6D;AAClEC,0BAAAA,WAAW,GAAGP,IAAI,CAACQ,aAAL,CAAmBC,sBAAjC;AACD,yBAFM,MAEA,IAAIT,IAAI,CAACQ,aAAL,CAAmBH,eAAnB,KAAuCC,SAA3C,EAAsD;AAC3DC,0BAAAA,WAAW,GAAGP,IAAI,CAACQ,aAAL,CAAmBH,eAAjC;AACD;AACF;;AAXiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA9B,GAPY;;AAAA;AAoBrBJ,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BK,WAA7B;AApBqB,8CAqBX;AAACA,cAAAA,WAAW,EAAXA,WAAD;AAAcP,cAAAA,IAAI,EAAJA;AAAd,aArBW;;AAAA;AAAA;AAAA;AAuBlB;AACAC,YAAAA,OAAO,CAACC,GAAR;;AAxBkB;AAAA;AAAA;;AAAA;AAAA,iBA4BbJ,MAAM,CAACE,IA5BM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA6BP,IAAIJ,IAAJ,CAASI,IAAI,CAACU,eAAd,CA7BO;;AAAA;AA6BpBV,YAAAA,IA7BoB;AA8BpBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AACA,gBAAIF,IAAJ,EAAU;AACR,kBAAIF,MAAM,CAACC,QAAP,CAAgBM,eAAhB,KAAoCC,SAAxC,EAAmD;AACjDC,gBAAAA,WAAW,GAAGT,MAAM,CAACC,QAAP,CAAgBM,eAA9B;AACD,eAFD,MAEO,IAAIL,IAAI,CAACQ,aAAL,CAAmBC,sBAAnB,KAA8CH,SAAlD,EAA6D;AAClEC,gBAAAA,WAAW,GAAGP,IAAI,CAACQ,aAAL,CAAmBC,sBAAjC;AACD,eAFM,MAEA,IAAIT,IAAI,CAACQ,aAAL,CAAmBH,eAAnB,KAAuCC,SAA3C,EAAsD;AAC3DC,gBAAAA,WAAW,GAAGP,IAAI,CAACQ,aAAL,CAAmBH,eAAjC;AACD;;AACDJ,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BK,WAA7B;AACD;;AAzCmB,8CA0Cb;AAACA,cAAAA,WAAW,EAAXA,WAAD;AAAcP,cAAAA,IAAI,EAAJA;AAAd,aA1Ca;;AAAA;AA8CpBC,YAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;;AA9CoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfL,eAAe;AAAA;AAAA;AAAA,GAArB;;AAkDA,eAAeA,eAAf","sourcesContent":["import Web3 from \"web3\"\n\nconst connectMetaMask = async ()=>{\n  let userAddress, web3\n  if (window.ethereum) {\n    web3 = await new Web3(window.ethereum);\n    console.log(\"connect MetaMask\");\n\n    try {\n      await window.ethereum.enable().then(async function () {\n        // User has allowed account access to DApp...\n        console.log(\"step2\");\n        if (web3) {\n          if (window.ethereum.selectedAddress !== undefined) {\n            userAddress = window.ethereum.selectedAddress;\n          } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n            userAddress = web3.givenProvider.MetamaskInpageProvider;\n          } else if (web3.givenProvider.selectedAddress !== undefined) {\n            userAddress = web3.givenProvider.selectedAddress;\n          }\n        }\n      })\n\t  console.log(\"userAddress: \", userAddress)\n      return {userAddress, web3}\n    } catch (e) {\n      // User has denied account access to DApp...\n      console.log(e);\n    }\n  }\n  // Legacy DApp Browsers\n  else if (window.web3) {\n    web3 = await new Web3(web3.currentProvider);\n    console.log(web3);\n    console.log(\"connect MetaMask\");\n    if (web3) {\n      if (window.ethereum.selectedAddress !== undefined) {\n        userAddress = window.ethereum.selectedAddress;\n      } else if (web3.givenProvider.MetamaskInpageProvider !== undefined) {\n        userAddress = web3.givenProvider.MetamaskInpageProvider;\n      } else if (web3.givenProvider.selectedAddress !== undefined) {\n        userAddress = web3.givenProvider.selectedAddress;\n      }\n      console.log(\"userAddress: \", userAddress);\n    }\n    return {userAddress, web3}\n  }\n  // Non-DApp Browsers\n  else {\n    console.log(\"You have to install MetaMask !\");\n  }\n}\n\nexport default connectMetaMask"]},"metadata":{},"sourceType":"module"}