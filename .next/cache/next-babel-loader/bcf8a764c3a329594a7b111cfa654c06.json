{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Avatar, Checkbox, Dropdown, Menu } from \"antd\";\nimport AddContact from \"../../AddContact/index\";\nvar options = ['Edit', 'Delete'];\n\nvar ContactCell = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContactCell, _React$Component);\n\n  var _super = _createSuper(ContactCell);\n\n  function ContactCell() {\n    var _this;\n\n    _classCallCheck(this, ContactCell);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"onContactClose\", function () {\n      _this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteContact\", function (contact) {\n      _this.setState({\n        addContactState: false\n      });\n\n      _this.props.onDeleteContact(contact);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEditContact\", function () {\n      _this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"menus\", function () {\n      return __jsx(Menu, {\n        onClick: function onClick(e) {\n          if (e.key === 'Edit') {\n            _this.onEditContact();\n          } else {\n            _this.onDeleteContact(_this.props.contact);\n          }\n        }\n      }, options.map(function (option) {\n        return __jsx(Menu.Item, {\n          key: option\n        }, option);\n      }));\n    });\n\n    _this.state = {\n      addContactState: false\n    };\n    return _this;\n  }\n\n  _createClass(ContactCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          contact = _this$props.contact,\n          onContactSelect = _this$props.onContactSelect,\n          onSaveContact = _this$props.onSaveContact;\n      var addContactState = this.state.addContactState;\n      var name = contact.name,\n          email = contact.email,\n          wallet = contact.wallet;\n      return __jsx(\"div\", {\n        className: \"gx-contact-item\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-list-icon\"\n      }, __jsx(Checkbox, {\n        className: \"gx-icon-btn\",\n        checked: contact.selected,\n        value: \"checkedF\",\n        onClick: function onClick() {\n          onContactSelect(contact);\n        }\n      })), __jsx(\"div\", {\n        className: \"gx-module-list-info gx-contact-list-info\"\n      }, __jsx(\"div\", {\n        className: \"gx-module-contact-content\"\n      }, __jsx(\"p\", {\n        className: \"gx-mb-1\"\n      }, __jsx(\"span\", {\n        className: \"gx-text-truncate gx-contact-name\"\n      }, \" \", name, \" \")), __jsx(\"div\", {\n        className: \"gx-text-muted\"\n      }, __jsx(\"span\", {\n        className: \"gx-email gx-d-inline-block gx-mr-2\"\n      }, email, \",\"), __jsx(\"span\", {\n        className: \"gx-phone gx-d-inline-block\"\n      }, wallet))), __jsx(\"div\", {\n        className: \"gx-module-contact-right\"\n      }, __jsx(Dropdown, {\n        overlay: this.menus(),\n        placement: \"bottomRight\",\n        trigger: ['click']\n      }, __jsx(\"i\", {\n        className: \"gx-icon-btn icon icon-ellipse-v\"\n      })), addContactState && __jsx(AddContact, {\n        open: addContactState,\n        contact: contact,\n        onSaveContact: onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact\n      }))));\n    }\n  }]);\n\n  return ContactCell;\n}(React.Component);\n\nexport default ContactCell;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/components/contact/ContactList/ContactCell/index.js"],"names":["React","Avatar","Checkbox","Dropdown","Menu","AddContact","options","ContactCell","setState","addContactState","contact","props","onDeleteContact","e","key","onEditContact","map","option","state","onContactSelect","onSaveContact","name","email","wallet","selected","menus","onContactClose","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Avatar, Checkbox, Dropdown, Menu} from \"antd\";\r\n\r\nimport AddContact from \"../../AddContact/index\";\r\n\r\nconst options = [\r\n  'Edit',\r\n  'Delete',\r\n];\r\n\r\nclass ContactCell extends React.Component {\r\n\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n  onDeleteContact = (contact) => {\r\n    this.setState({addContactState: false});\r\n    this.props.onDeleteContact(contact);\r\n  };\r\n  onEditContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  menus = () => (<Menu onClick={(e) => {\r\n    if (e.key === 'Edit') {\r\n      this.onEditContact()\r\n    } else {\r\n      this.onDeleteContact(this.props.contact)\r\n    }\r\n  }\r\n  }>\r\n    {options.map(option =>\r\n      <Menu.Item key={option}>\r\n        {option}\r\n      </Menu.Item>,\r\n    )}\r\n  </Menu>);\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      addContactState: false,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {contact, onContactSelect, onSaveContact} = this.props;\r\n    const {addContactState} = this.state;\r\n    const {name, email, wallet} = contact;\r\n\r\n    return (\r\n\r\n      <div className=\"gx-contact-item\">\r\n        <div className=\"gx-module-list-icon\">\r\n          <Checkbox className=\"gx-icon-btn\"\r\n                    checked={contact.selected}\r\n                    value=\"checkedF\"\r\n                    onClick={() => {\r\n                      onContactSelect(contact)\r\n                    }}/>\r\n        </div>\r\n\r\n        <div className=\"gx-module-list-info gx-contact-list-info\">\r\n          <div className=\"gx-module-contact-content\">\r\n            <p className=\"gx-mb-1\">\r\n              <span className=\"gx-text-truncate gx-contact-name\"> {name} </span>\r\n{/*               <span className=\"gx-toolbar-separator\">&nbsp;</span>\r\n              <span className=\"gx-text-truncate gx-job-title\">{designation}</span> */}\r\n            </p>\r\n\r\n            <div className=\"gx-text-muted\">\r\n            <span className=\"gx-email gx-d-inline-block gx-mr-2\">\r\n                {email},\r\n            </span>\r\n              <span className=\"gx-phone gx-d-inline-block\">{wallet}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"gx-module-contact-right\">\r\n\r\n            <Dropdown overlay={this.menus()} placement=\"bottomRight\" trigger={['click']}>\r\n              <i className=\"gx-icon-btn icon icon-ellipse-v\"/>\r\n            </Dropdown>\r\n\r\n            {addContactState &&\r\n            <AddContact open={addContactState} contact={contact} onSaveContact={onSaveContact}\r\n                        onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContactCell;\r\n"]},"metadata":{},"sourceType":"module"}