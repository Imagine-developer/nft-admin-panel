{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Avatar, Checkbox, Dropdown, Menu } from \"antd\";\nimport AddContact from \"../../AddContact/index\";\nconst options = ['Edit', 'Delete'];\n\nclass ContactCell extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"onContactClose\", () => {\n      this.setState({\n        addContactState: false\n      });\n    });\n\n    _defineProperty(this, \"onDeleteContact\", contact => {\n      this.setState({\n        addContactState: false\n      });\n      this.props.onDeleteContact(contact);\n    });\n\n    _defineProperty(this, \"onEditContact\", () => {\n      this.setState({\n        addContactState: true\n      });\n    });\n\n    _defineProperty(this, \"menus\", () => __jsx(Menu, {\n      onClick: e => {\n        if (e.key === 'Edit') {\n          this.onEditContact();\n        } else {\n          this.onDeleteContact(this.props.contact);\n        }\n      }\n    }, options.map(option => __jsx(Menu.Item, {\n      key: option\n    }, option))));\n\n    this.state = {\n      addContactState: false\n    };\n  }\n\n  render() {\n    if (name) {}\n\n    const {\n      contact,\n      onContactSelect,\n      onSaveContact\n    } = this.props;\n    const {\n      addContactState\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"gx-contact-item\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-list-info gx-contact-list-info\"\n    }, __jsx(\"div\", {\n      className: \"gx-module-contact-content\"\n    }, __jsx(\"p\", {\n      className: \"gx-mb-1\"\n    }, contact.description ? __jsx(\"span\", {\n      className: \"gx-text-truncate gx-contact-name\"\n    }, \" \", contact.collect, \" \") : __jsx(\"span\", {\n      className: \"gx-text-truncate gx-contact-name\"\n    }, \" \", name, \" \")), __jsx(\"div\", {\n      className: \"gx-text-muted\"\n    }, contact.name ? __jsx(\"span\", {\n      className: \"gx-email gx-d-inline-block gx-mr-2\"\n    }, contact.description, \",\") : __jsx(\"span\", {\n      className: \"gx-email gx-d-inline-block gx-mr-2\"\n    }, email, \",\"), contact.name ? __jsx(\"span\", {\n      className: \"gx-phone gx-d-inline-block\"\n    }, contact.owner.name) : __jsx(\"span\", {\n      className: \"gx-phone gx-d-inline-block\"\n    }, wallet))), __jsx(\"div\", {\n      className: \"gx-module-contact-right\"\n    }, __jsx(Dropdown, {\n      overlay: this.menus(),\n      placement: \"bottomRight\",\n      trigger: ['click']\n    }, __jsx(\"i\", {\n      className: \"gx-icon-btn icon icon-ellipse-v\"\n    })), addContactState && __jsx(AddContact, {\n      open: addContactState,\n      contact: contact,\n      onSaveContact: onSaveContact,\n      onContactClose: this.onContactClose,\n      onDeleteContact: this.onDeleteContact\n    }))));\n  }\n\n}\n\nexport default ContactCell;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/app/components/contact/ContactList/ContactCell/index.js"],"names":["React","Avatar","Checkbox","Dropdown","Menu","AddContact","options","ContactCell","Component","constructor","setState","addContactState","contact","props","onDeleteContact","e","key","onEditContact","map","option","state","render","name","onContactSelect","onSaveContact","description","collect","email","owner","wallet","menus","onContactClose"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,IAApC,QAA+C,MAA/C;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,MAAMC,OAAO,GAAG,CACd,MADc,EAEd,QAFc,CAAhB;;AAKA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AA2BxCC,EAAAA,WAAW,GAAG;AACZ;;AADY,4CAzBG,MAAM;AACrB,WAAKC,QAAL,CAAc;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD,KAuBa;;AAAA,6CAtBKC,OAAD,IAAa;AAC7B,WAAKF,QAAL,CAAc;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACA,WAAKE,KAAL,CAAWC,eAAX,CAA2BF,OAA3B;AACD,KAmBa;;AAAA,2CAlBE,MAAM;AACpB,WAAKF,QAAL,CAAc;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD,KAgBa;;AAAA,mCAfN,MAAO,MAAC,IAAD;AAAM,MAAA,OAAO,EAAGI,CAAD,IAAO;AACnC,YAAIA,CAAC,CAACC,GAAF,KAAU,MAAd,EAAsB;AACpB,eAAKC,aAAL;AACD,SAFD,MAEO;AACL,eAAKH,eAAL,CAAqB,KAAKD,KAAL,CAAWD,OAAhC;AACD;AACF;AANc,OAQZN,OAAO,CAACY,GAAR,CAAYC,MAAM,IACjB,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA;AAAhB,OACGA,MADH,CADD,CARY,CAeD;;AAEZ,SAAKC,KAAL,GAAa;AACXT,MAAAA,eAAe,EAAE;AADN,KAAb;AAGD;;AAEDU,EAAAA,MAAM,GAAG;AACP,QAAIC,IAAJ,EAAS,CAER;;AACD,UAAM;AAACV,MAAAA,OAAD;AAAUW,MAAAA,eAAV;AAA2BC,MAAAA;AAA3B,QAA4C,KAAKX,KAAvD;AACA,UAAM;AAACF,MAAAA;AAAD,QAAoB,KAAKS,KAA/B;AAEA,WAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAG,MAAA,SAAS,EAAC;AAAb,OACGR,OAAO,CAACa,WAAR,GAAqB;AAAM,MAAA,SAAS,EAAC;AAAhB,YAAqDb,OAAO,CAACc,OAA7D,MAArB,GAAmG;AAAM,MAAA,SAAS,EAAC;AAAhB,YAAqDJ,IAArD,MADtG,CADF,EAOE;AAAK,MAAA,SAAS,EAAC;AAAf,OACCV,OAAO,CAACU,IAAR,GAAe;AAAM,MAAA,SAAS,EAAC;AAAhB,OACXV,OAAO,CAACa,WADG,MAAf,GAEQ;AAAM,MAAA,SAAS,EAAC;AAAhB,OACJE,KADI,MAHT,EAMGf,OAAO,CAACU,IAAR,GAAe;AAAM,MAAA,SAAS,EAAC;AAAhB,OAA8CV,OAAO,CAACgB,KAAR,CAAcN,IAA5D,CAAf,GAAyF;AAAM,MAAA,SAAS,EAAC;AAAhB,OAA8CO,MAA9C,CAN5F,CAPF,CADF,EAkBE;AAAK,MAAA,SAAS,EAAC;AAAf,OAEE,MAAC,QAAD;AAAU,MAAA,OAAO,EAAE,KAAKC,KAAL,EAAnB;AAAiC,MAAA,SAAS,EAAC,aAA3C;AAAyD,MAAA,OAAO,EAAE,CAAC,OAAD;AAAlE,OACE;AAAG,MAAA,SAAS,EAAC;AAAb,MADF,CAFF,EAMGnB,eAAe,IAChB,MAAC,UAAD;AAAY,MAAA,IAAI,EAAEA,eAAlB;AAAmC,MAAA,OAAO,EAAEC,OAA5C;AAAqD,MAAA,aAAa,EAAEY,aAApE;AACY,MAAA,cAAc,EAAE,KAAKO,cADjC;AACiD,MAAA,eAAe,EAAE,KAAKjB;AADvE,MAPF,CAlBF,CAFF,CAFF;AAmCD;;AA5EuC;;AA+E1C,eAAeP,WAAf","sourcesContent":["import React from \"react\";\r\nimport {Avatar, Checkbox, Dropdown, Menu} from \"antd\";\r\n\r\nimport AddContact from \"../../AddContact/index\";\r\n\r\nconst options = [\r\n  'Edit',\r\n  'Delete',\r\n];\r\n\r\nclass ContactCell extends React.Component {\r\n\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n  onDeleteContact = (contact) => {\r\n    this.setState({addContactState: false});\r\n    this.props.onDeleteContact(contact);\r\n  };\r\n  onEditContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  menus = () => (<Menu onClick={(e) => {\r\n    if (e.key === 'Edit') {\r\n      this.onEditContact()\r\n    } else {\r\n      this.onDeleteContact(this.props.contact)\r\n    }\r\n  }\r\n  }>\r\n    {options.map(option =>\r\n      <Menu.Item key={option}>\r\n        {option}\r\n      </Menu.Item>,\r\n    )}\r\n  </Menu>);\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      addContactState: false,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (name){\r\n      \r\n    }\r\n    const {contact, onContactSelect, onSaveContact} = this.props;\r\n    const {addContactState} = this.state;\r\n\r\n    return (\r\n\r\n      <div className=\"gx-contact-item\">\r\n\r\n        <div className=\"gx-module-list-info gx-contact-list-info\">\r\n          <div className=\"gx-module-contact-content\">\r\n            <p className=\"gx-mb-1\">\r\n              {contact.description? <span className=\"gx-text-truncate gx-contact-name\"> {contact.collect} </span>:<span className=\"gx-text-truncate gx-contact-name\"> {name} </span>}\r\n{/*               <span className=\"gx-toolbar-separator\">&nbsp;</span>\r\n              <span className=\"gx-text-truncate gx-job-title\">{designation}</span> */}\r\n            </p>\r\n\r\n            <div className=\"gx-text-muted\">\r\n            {contact.name ? <span className=\"gx-email gx-d-inline-block gx-mr-2\">\r\n                {contact.description},\r\n            </span> :<span className=\"gx-email gx-d-inline-block gx-mr-2\">\r\n                {email},\r\n            </span>}\r\n              {contact.name ? <span className=\"gx-phone gx-d-inline-block\">{contact.owner.name}</span>: <span className=\"gx-phone gx-d-inline-block\">{wallet}</span>}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"gx-module-contact-right\">\r\n\r\n            <Dropdown overlay={this.menus()} placement=\"bottomRight\" trigger={['click']}>\r\n              <i className=\"gx-icon-btn icon icon-ellipse-v\"/>\r\n            </Dropdown>\r\n\r\n            {addContactState &&\r\n            <AddContact open={addContactState} contact={contact} onSaveContact={onSaveContact}\r\n                        onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContactCell;\r\n"]},"metadata":{},"sourceType":"module"}