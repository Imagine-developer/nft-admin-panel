{"ast":null,"code":"var _jsxFileName = \"/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Mail/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from \"react\";\nimport { Button, Checkbox, Drawer, Dropdown, Menu, message } from \"antd\";\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\nimport axios from 'axios';\nimport mails from \"./data/mails\";\nimport folders from \"./data/folders\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport MailList from \"../../app/components/mail/MailList\";\nimport ComposeMail from \"../../app/components/mail/Compose\";\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\nimport MailDetail from \"../../app/components/mail/MailDetail\";\nimport IntlMessages from \"../../util/IntlMessages\";\nimport CircularProgress from \"../../app/components/CircularProgress\";\nimport './index.css';\n\nclass Mail extends PureComponent {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"onDeleteMail\", () => {\n      const mails = this.state.allMail.map(mail => mail.selected && mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        folder: 4,\n        selected: false\n      }) : mail);\n      this.setState({\n        alertMessage: 'Mail Deleted Successfully',\n        showMessage: true,\n        selectedMails: 0,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"getNavFolders\", () => {\n      return folders.map((folder, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allMail.filter(mail => mail.folder === folder.id);\n          this.setState({\n            selectedFolder: folder.id,\n            noContentFoundMessage: 'No Mail found in selected folder',\n            currentMail: null,\n            loader: true,\n            folderMails: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }\n      }, __jsx(\"span\", {\n        className: `${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, __jsx(\"i\", {\n        className: `icon icon-${folder.icon}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, folder.title))));\n    });\n\n    _defineProperty(this, \"onFolderMenuItemSelect\", e => {\n      const id = +e.key;\n      const mails = this.state.allMail.map(mail => mail.selected && mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        folder: id,\n        selected: false\n      }) : mail);\n      this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        noContentFoundMessage: 'No Mail found in selected folder',\n        alertMessage: 'Mail has been moved successfully',\n        showMessage: true,\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"onLabelMenuItemSelect\", e => {\n      const id = +e.key;\n      const mails = this.state.allMail.map(mail => {\n        if (mail.selected && mail.folder === this.state.selectedFolder) {\n          if (mail.labels.includes(id)) {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: this.removeLabel(mail, id)\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, mail), {}, {\n              labels: this.addLabel(mail, id)\n            });\n          }\n        } else {\n          return mail;\n        }\n      });\n      this.setState({\n        noContentFoundMessage: 'No Mail found in selected label',\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"handleRequestClose\", () => {\n      this.setState({\n        composeMail: false,\n        showMessage: false\n      });\n    });\n\n    _defineProperty(this, \"getNavFilters\", () => {\n      return filters.map((filter, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allMail.filter(mail => {\n            if (filter.id === 0 && mail.starred && mail.folder === this.state.selectedFolder) {\n              return mail;\n            } else if (filter.id === 1 && mail.important && mail.folder === this.state.selectedFolder) {\n              return mail;\n            }\n\n            return null;\n          });\n          this.setState({\n            noContentFoundMessage: 'No Mail found in selected filter',\n            loader: true,\n            folderMails: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, __jsx(\"span\", {\n        className: \"gx-link\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, __jsx(\"i\", {\n        className: `icon icon-${filter.icon}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }, filter.title))));\n    });\n\n    _defineProperty(this, \"onOptionMenuItemSelect\", e => {\n      switch (e.key) {\n        case 'All':\n          this.handleRequestClose();\n          this.getAllMail();\n          break;\n\n        case 'None':\n          this.handleRequestClose();\n          this.getUnselectedAllMail();\n          break;\n\n        case 'Read':\n          this.handleRequestClose();\n          this.getReadMail();\n          break;\n\n        case 'Unread':\n          this.handleRequestClose();\n          this.getUnreadMail();\n          break;\n\n        case 'Starred':\n          this.handleRequestClose();\n          this.getStarredMail();\n          break;\n\n        case 'Unstarred':\n          this.handleRequestClose();\n          this.getUnStarredMail();\n          break;\n\n        case 'Important':\n          this.handleRequestClose();\n          this.getImportantMail();\n          break;\n\n        case 'Unimportant':\n          this.handleRequestClose();\n          this.getUnimportantMail();\n          break;\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(this, \"getAllMail\", () => {\n      let mails = this.state.allMail.map(mail => mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        selected: true\n      }) : mail);\n      this.setState({\n        selectedMails: mails.length,\n        allMail: mails,\n        optionName: 'All',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"getUnselectedAllMail\", () => {\n      let mails = this.state.allMail.map(mail => mail.folder === this.state.selectedFolder ? _objectSpread(_objectSpread({}, mail), {}, {\n        selected: false\n      }) : mail);\n      this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        optionName: 'None',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n    });\n\n    _defineProperty(this, \"getReadMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Read',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getUnreadMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (!mail.read) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unread',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getStarredMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Starred',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getUnStarredMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (!mail.starred) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'UnStarred',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getImportantMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Important',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getUnimportantMail\", () => {\n      let selectedMail = 0;\n      let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n      mails = mails.map(mail => {\n        if (!mail.important) {\n          selectedMail++;\n          return _objectSpread(_objectSpread({}, mail), {}, {\n            selected: true\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, mail), {}, {\n          selected: false\n        });\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unimportant',\n        noContentFoundMessage: 'No Mail found in selected Label',\n        folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n      });\n      return mails;\n    });\n\n    _defineProperty(this, \"getNavLabels\", () => {\n      return labels.map((label, index) => __jsx(\"li\", {\n        key: index,\n        onClick: () => {\n          const filterMails = this.state.allMail.filter(mail => mail.labels.includes(label.id) && mail.folder === this.state.selectedFolder);\n          this.setState({\n            loader: true,\n            noContentFoundMessage: 'No Mail found in selected label',\n            folderMails: filterMails\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 7\n        }\n      }, __jsx(\"span\", {\n        className: \"gx-link\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 9\n        }\n      }, __jsx(\"i\", {\n        className: `icon icon-tag gx-text-${label.color}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }\n      }), __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }\n      }, label.title))));\n    });\n\n    _defineProperty(this, \"searchMail\", searchText => {\n      if (searchText === '') {\n        this.setState({\n          folderMails: this.state.allMail.filter(mail => !mail.deleted)\n        });\n      } else {\n        const searchMails = this.state.allMail.filter(mail => mail.title.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\n        this.setState({\n          folderMails: searchMails\n        });\n      }\n    });\n\n    _defineProperty(this, \"displayMail\", (currentMail, folderMails, noContentFoundMessage) => {\n      return __jsx(\"div\", {\n        className: \"gx-module-box-column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }\n      }, currentMail === null ? folderMails.length === 0 ? __jsx(\"div\", {\n        className: \"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }\n      }, noContentFoundMessage) : __jsx(MailList, {\n        mails: folderMails,\n        onStartSelect: this.onStartSelect.bind(this),\n        onMailSelect: this.onMailSelect.bind(this),\n        onMailChecked: this.onMailChecked.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }\n      }) : __jsx(MailDetail, {\n        mail: currentMail,\n        onStartSelect: this.onStartSelect.bind(this),\n        onImportantSelect: this.onImportantSelect.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 9\n        }\n      }));\n    });\n\n    _defineProperty(this, \"getMailActions\", () => {\n      return __jsx(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 12\n        }\n      }, __jsx(Dropdown, {\n        overlay: this.folderMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 7\n        }\n      }, __jsx(\"i\", {\n        className: \"icon icon-folder gx-icon-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 9\n        }\n      })), __jsx(Dropdown, {\n        overlay: this.labelMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 7\n        }\n      }, __jsx(\"i\", {\n        className: \"icon icon-tag gx-icon-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 9\n        }\n      })), __jsx(\"span\", {\n        onClick: this.onDeleteMail.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 7\n        }\n      }, __jsx(\"i\", {\n        className: \"icon icon-trash gx-icon-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 9\n        }\n      })));\n    });\n\n    _defineProperty(this, \"optionMenu\", () => __jsx(Menu, {\n      id: \"option-menu\",\n      onClick: this.onOptionMenuItemSelect.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 5\n      }\n    }, options.map(option => __jsx(Menu.Item, {\n      key: option.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }\n    }, option.title))));\n\n    _defineProperty(this, \"folderMenu\", () => __jsx(Menu, {\n      id: \"folder-menu\",\n      onClick: this.onFolderMenuItemSelect.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 5\n      }\n    }, folders.map(folder => __jsx(Menu.Item, {\n      key: folder.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }\n    }, folder.title))));\n\n    _defineProperty(this, \"labelMenu\", () => __jsx(Menu, {\n      id: \"label-menu\",\n      onClick: this.onLabelMenuItemSelect.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 5\n      }\n    }, labels.map(label => __jsx(Menu.Item, {\n      key: label.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }\n    }, label.title))));\n\n    this.state = {\n      searchMail: '',\n      noContentFoundMessage: 'No Mail found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allMail: mails,\n      loader: true,\n      currentMail: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      selectedMails: 0,\n      selectedFolder: 0,\n      composeMail: false,\n      folderMails: mails.filter(mail => mail.folder === 0)\n    };\n  }\n\n  async componentDidMount() {\n    const result = await axios.get('https://desolate-inlet-76011.herokuapp.com/reports');\n    console.log(result.data);\n    this.setState({\n      loader: false,\n      folderMails: result.data,\n      allMail: result.data\n    });\n  }\n\n  onMailChecked(data) {\n    data.selected = !data.selected;\n    let selectedMail = 0;\n    const mails = this.state.folderMails.map(mail => {\n      if (mail.selected) {\n        selectedMail++;\n      }\n\n      if (mail.id === data.id) {\n        if (mail.selected) {\n          selectedMail++;\n        }\n\n        return data;\n      } else {\n        return mail;\n      }\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      folderMails: mails\n    });\n  }\n\n  onAllMailSelect() {\n    const selectAll = this.state.selectedMails <= this.state.folderMails.length;\n\n    if (selectAll) {\n      this.getAllMail();\n    } else {\n      this.getUnselectedAllMail();\n    }\n  }\n\n  removeLabel(mail, label) {\n    mail.labels.splice(mail.labels.indexOf(label), 1);\n\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n      this.setState({\n        currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n          labels: mail.labels\n        })\n      });\n    }\n\n    return mail.labels;\n  }\n\n  onStartSelect(data) {\n    data.starred = !data.starred;\n    this.setState({\n      alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n      showMessage: true,\n      folderMails: this.state.folderMails.map(mail => mail.id === data.id ? data : mail)\n    });\n  }\n\n  onImportantSelect(data) {\n    data.important = !data.important;\n    this.setState({\n      alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n      showMessage: true,\n      folderMails: this.state.folderMails.map(mail => mail.id === data.id ? data : mail)\n    });\n  }\n\n  onMailSend(data) {\n    this.setState({\n      alertMessage: 'Mail Sent Successfully',\n      showMessage: true,\n      folderMails: this.state.allMail.concat(data),\n      allMail: this.state.allMail.concat(data)\n    });\n  }\n\n  onMailSelect(mail) {\n    this.setState({\n      loader: true,\n      currentMail: mail\n    });\n    setTimeout(() => {\n      this.setState({\n        loader: false\n      });\n    }, 1500);\n  }\n\n  addLabel(mail, label) {\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n      this.setState({\n        currentMail: _objectSpread(_objectSpread({}, mail), {}, {\n          labels: mail.labels.concat(label)\n        })\n      });\n    }\n\n    return mail.labels.concat(label);\n  }\n\n  updateSearch(evt) {\n    this.setState({\n      searchMail: evt.target.value\n    });\n    this.searchMail(evt.target.value);\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {\n      selectedMails,\n      loader,\n      currentMail,\n      drawerState,\n      folderMails,\n      composeMail,\n      user,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"gx-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-app-module\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-d-block gx-d-lg-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 11\n      }\n    }, __jsx(Drawer, {\n      placement: \"left\",\n      closable: false,\n      visible: drawerState,\n      onClose: this.onToggleDrawer.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 13\n      }\n    })), __jsx(\"div\", {\n      className: \"gx-module-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"gx-module-box-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 15\n      }\n    }, __jsx(\"i\", {\n      className: \"icon icon-menu gx-icon-btn\",\n      \"aria-label\": \"Menu\",\n      onClick: this.onToggleDrawer.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 19\n      }\n    })), __jsx(AppModuleHeader, {\n      placeholder: \"Search mails\",\n      user: this.state.user,\n      onChange: this.updateSearch.bind(this),\n      value: this.state.searchMail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"gx-module-box-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 13\n      }\n    }, loader ? __jsx(\"div\", {\n      className: \"gx-loader-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 17\n      }\n    }, __jsx(CircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 19\n      }\n    })) : this.displayMail(currentMail, folderMails, noContentFoundMessage), __jsx(ComposeMail, {\n      open: composeMail,\n      user: user,\n      onClose: this.handleRequestClose.bind(this),\n      onMailSend: this.onMailSend.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 15\n      }\n    })))), showMessage && message.info(__jsx(\"span\", {\n      id: \"message-id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 38\n      }\n    }, alertMessage), 3, this.handleRequestClose));\n  }\n\n}\n\nexport default Mail;","map":{"version":3,"sources":["/Users/andreyplatonov/Downloads/Telegram Desktop/wieldy-v-2.4.3/next-js-jwt-stater-kit/routes/Mail/index.js"],"names":["React","PureComponent","Button","Checkbox","Drawer","Dropdown","Menu","message","CustomScrollbars","axios","mails","folders","filters","labels","options","MailList","ComposeMail","AppModuleHeader","MailDetail","IntlMessages","CircularProgress","Mail","constructor","state","allMail","map","mail","selected","folder","selectedFolder","setState","alertMessage","showMessage","selectedMails","folderMails","filter","index","filterMails","id","noContentFoundMessage","currentMail","loader","setTimeout","icon","title","e","key","includes","removeLabel","addLabel","composeMail","starred","important","handleRequestClose","getAllMail","getUnselectedAllMail","getReadMail","getUnreadMail","getStarredMail","getUnStarredMail","getImportantMail","getUnimportantMail","length","optionName","selectedMail","read","label","color","searchText","deleted","searchMails","toLowerCase","indexOf","onStartSelect","bind","onMailSelect","onMailChecked","onImportantSelect","folderMenu","labelMenu","onDeleteMail","onOptionMenuItemSelect","option","onFolderMenuItemSelect","onLabelMenuItemSelect","searchMail","drawerState","anchorEl","user","name","email","avatar","componentDidMount","result","get","console","log","data","onAllMailSelect","selectAll","splice","onMailSend","concat","updateSearch","evt","target","value","onToggleDrawer","render","displayMail","info"],"mappings":"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","sourcesContent":["import React, {PureComponent} from \"react\";\r\nimport {Button, Checkbox, Drawer, Dropdown, Menu, message} from \"antd\";\r\nimport CustomScrollbars from \"../../util/CustomScrollbars\";\r\nimport axios from 'axios'\r\n\r\nimport mails from \"./data/mails\";\r\nimport folders from \"./data/folders\";\r\nimport filters from \"./data/filters\";\r\nimport labels from \"./data/labels\";\r\nimport options from \"./data/options\";\r\nimport MailList from \"../../app/components/mail/MailList\";\r\nimport ComposeMail from \"../../app/components/mail/Compose\";\r\nimport AppModuleHeader from \"../../app/components/AppModuleHeader\";\r\nimport MailDetail from \"../../app/components/mail/MailDetail\";\r\nimport IntlMessages from \"../../util/IntlMessages\";\r\nimport CircularProgress from \"../../app/components/CircularProgress\";\r\n\r\nimport './index.css';\r\n\r\n\r\nclass Mail extends PureComponent {\r\n  \r\n\r\n  onDeleteMail = () => {\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: 4, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      alertMessage: 'Mail Deleted Successfully',\r\n      showMessage: true,\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  getNavFolders = () => {\r\n    return folders.map((folder, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.folder === folder.id);\r\n        this.setState({\r\n          selectedFolder: folder.id,\r\n          noContentFoundMessage: 'No Mail found in selected folder',\r\n          currentMail: null,\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className={`${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`}>\r\n          <i className={`icon icon-${folder.icon}`}/>\r\n          <span>{folder.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n\r\n\r\n  onFolderMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const mails = this.state.allMail.map(mail =>\r\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\r\n        {...mail, folder: id, selected: false,} : mail\r\n    );\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      noContentFoundMessage: 'No Mail found in selected folder',\r\n      alertMessage: 'Mail has been moved successfully',\r\n      showMessage: true,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  onLabelMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const mails = this.state.allMail.map(mail => {\r\n        if (mail.selected && (mail.folder === this.state.selectedFolder)) {\r\n          if (mail.labels.includes(id)) {\r\n            return {...mail, labels: this.removeLabel(mail, id)};\r\n          } else {\r\n            return {...mail, labels: this.addLabel(mail, id)};\r\n          }\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      noContentFoundMessage: 'No Mail found in selected label',\r\n      alertMessage: 'Label Updated Successfully',\r\n      showMessage: true,\r\n      allMail: mails,\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      composeMail: false,\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getNavFilters = () => {\r\n    return filters.map((filter, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => {\r\n          if (filter.id === 0 && mail.starred && mail.folder === this.state.selectedFolder) {\r\n            return mail\r\n          } else if (filter.id === 1 && mail.important && mail.folder === this.state.selectedFolder) {\r\n            return mail\r\n          }\r\n          return null;\r\n        });\r\n        this.setState({\r\n          noContentFoundMessage: 'No Mail found in selected filter',\r\n          loader: true,\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-${filter.icon}`}/>\r\n          <span>{filter.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  onOptionMenuItemSelect = (e) => {\r\n    switch (e.key) {\r\n      case 'All':\r\n        this.handleRequestClose();\r\n        this.getAllMail();\r\n        break;\r\n      case 'None':\r\n        this.handleRequestClose();\r\n        this.getUnselectedAllMail();\r\n        break;\r\n      case 'Read':\r\n        this.handleRequestClose();\r\n        this.getReadMail();\r\n        break;\r\n      case 'Unread':\r\n        this.handleRequestClose();\r\n        this.getUnreadMail();\r\n        break;\r\n      case 'Starred':\r\n        this.handleRequestClose();\r\n        this.getStarredMail();\r\n        break;\r\n      case 'Unstarred':\r\n        this.handleRequestClose();\r\n        this.getUnStarredMail();\r\n        break;\r\n      case 'Important':\r\n        this.handleRequestClose();\r\n        this.getImportantMail();\r\n        break;\r\n      case 'Unimportant':\r\n        this.handleRequestClose();\r\n        this.getUnimportantMail();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  getAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: true\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: mails.length,\r\n      allMail: mails,\r\n      optionName: 'All',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getUnselectedAllMail = () => {\r\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\r\n      ...mail,\r\n      selected: false\r\n    } : mail);\r\n    this.setState({\r\n      selectedMails: 0,\r\n      allMail: mails,\r\n      optionName: 'None',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getReadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Read',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnreadMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.read) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Unread',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Starred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnStarredMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.starred) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'UnStarred',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getImportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Important',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getUnimportantMail = () => {\r\n    let selectedMail = 0;\r\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\r\n    mails = mails.map((mail) => {\r\n      if (!mail.important) {\r\n        selectedMail++;\r\n        return {...mail, selected: true};\r\n      }\r\n      return {...mail, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      optionName: 'Unimportant',\r\n      noContentFoundMessage: 'No Mail found in selected Label',\r\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\r\n    });\r\n    return mails;\r\n  };\r\n  getNavLabels = () => {\r\n    return labels.map((label, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterMails = this.state.allMail.filter(mail => mail.labels.includes(label.id) && mail.folder === this.state.selectedFolder);\r\n        this.setState({\r\n          loader: true,\r\n          noContentFoundMessage: 'No Mail found in selected label',\r\n          folderMails: filterMails\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-tag gx-text-${label.color}`}/>\r\n          <span>{label.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  searchMail = (searchText) => {\r\n    if (searchText === '') {\r\n      this.setState({folderMails: this.state.allMail.filter((mail) => !mail.deleted)});\r\n    } else {\r\n      const searchMails = this.state.allMail.filter((mail) =>\r\n        mail.title.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n      this.setState({\r\n        folderMails: searchMails\r\n      });\r\n    }\r\n  };\r\n  displayMail = (currentMail, folderMails, noContentFoundMessage) => {\r\n    return (<div className=\"gx-module-box-column\">\r\n      {currentMail === null ?\r\n        folderMails.length === 0 ?\r\n          <div className=\"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\">\r\n            {noContentFoundMessage}\r\n          </div>\r\n          :\r\n          <MailList mails={folderMails} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onMailSelect={this.onMailSelect.bind(this)}\r\n                    onMailChecked={this.onMailChecked.bind(this)}/>\r\n        :\r\n        <MailDetail mail={currentMail} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onImportantSelect={this.onImportantSelect.bind(this)}/>}\r\n    </div>)\r\n  };\r\n  getMailActions = () => {\r\n    return <div className=\"gx-flex-row gx-align-items-center\">\r\n\r\n      <Dropdown overlay={this.folderMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-folder gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <Dropdown overlay={this.labelMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-tag gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <span onClick={this.onDeleteMail.bind(this)}>\r\n        <i className=\"icon icon-trash gx-icon-btn\"/></span>\r\n\r\n    </div>\r\n  };\r\n\r\n  optionMenu = () => (\r\n    <Menu id=\"option-menu\"\r\n          onClick={this.onOptionMenuItemSelect.bind(this)}>\r\n      {options.map(option =>\r\n        <Menu.Item key={option.title}>\r\n          {option.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  folderMenu = () => (\r\n    <Menu id=\"folder-menu\"\r\n          onClick={this.onFolderMenuItemSelect.bind(this)}>\r\n      {folders.map(folder =>\r\n        <Menu.Item key={folder.id}>\r\n          {folder.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  labelMenu = () => (\r\n    <Menu id=\"label-menu\"\r\n          onClick={this.onLabelMenuItemSelect.bind(this)}>\r\n      {labels.map(label =>\r\n        <Menu.Item key={label.id}>\r\n          {label.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchMail: '',\r\n      noContentFoundMessage: 'No Mail found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      drawerState: false,\r\n      optionName: 'None',\r\n      anchorEl: null,\r\n      allMail: mails,\r\n      loader: true,\r\n      currentMail: null,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert@example.com',\r\n        avatar: 'https://via.placeholder.com/150x150'\r\n      },\r\n      selectedMails: 0,\r\n      selectedFolder: 0,\r\n      composeMail: false,\r\n      folderMails: mails.filter(mail => mail.folder === 0)\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const result = await axios.get('https://desolate-inlet-76011.herokuapp.com/reports')\r\n    console.log(result.data)\r\n\r\n    this.setState({loader: false, folderMails: result.data, allMail: result.data})\r\n  }\r\n\r\n\r\n  onMailChecked(data) {\r\n    data.selected = !data.selected;\r\n    let selectedMail = 0;\r\n    const mails = this.state.folderMails.map(mail => {\r\n        if (mail.selected) {\r\n          selectedMail++;\r\n        }\r\n        if (mail.id === data.id) {\r\n          if (mail.selected) {\r\n            selectedMail++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return mail;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedMails: selectedMail,\r\n      folderMails: mails\r\n    });\r\n  }\r\n\r\n  onAllMailSelect() {\r\n    const selectAll = this.state.selectedMails <= this.state.folderMails.length;\r\n    if (selectAll) {\r\n      this.getAllMail();\r\n    } else {\r\n      this.getUnselectedAllMail();\r\n    }\r\n  }\r\n\r\n  removeLabel(mail, label) {\r\n    mail.labels.splice(mail.labels.indexOf(label), 1);\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels}\r\n      })\r\n    }\r\n    return mail.labels;\r\n  }\r\n\r\n  onStartSelect(data) {\r\n    data.starred = !data.starred;\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onImportantSelect(data) {\r\n    data.important = !data.important;\r\n    this.setState({\r\n      alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\r\n      showMessage: true,\r\n      folderMails: this.state.folderMails.map(mail =>\r\n        mail.id === data.id ?\r\n          data : mail\r\n      )\r\n    });\r\n  }\r\n\r\n  onMailSend(data) {\r\n    this.setState(\r\n      {\r\n        alertMessage: 'Mail Sent Successfully',\r\n        showMessage: true,\r\n        folderMails: this.state.allMail.concat(data),\r\n        allMail: this.state.allMail.concat(data)\r\n      }\r\n    );\r\n  }\r\n\r\n  onMailSelect(mail) {\r\n    this.setState({\r\n      loader: true,\r\n      currentMail: mail,\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n  addLabel(mail, label) {\r\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\r\n      this.setState({\r\n        currentMail: {...mail, labels: mail.labels.concat(label)}\r\n      })\r\n    }\r\n    return mail.labels.concat(label)\r\n  }\r\n\r\n  updateSearch(evt) {\r\n    this.setState({\r\n      searchMail: evt.target.value,\r\n    });\r\n    this.searchMail(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {selectedMails, loader, currentMail, drawerState, folderMails, composeMail, user, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module\">\r\n\r\n          <div className=\"gx-d-block gx-d-lg-none\">\r\n            <Drawer\r\n              placement=\"left\"\r\n              closable={false}\r\n              visible={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n            </Drawer>\r\n\r\n          </div>\r\n\r\n          <div className=\"gx-module-box\">\r\n            <div className=\"gx-module-box-header\">\r\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\r\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\r\n                     onClick={this.onToggleDrawer.bind(this)}/>\r\n              </span>\r\n              <AppModuleHeader placeholder=\"Search mails\" user={this.state.user}\r\n                               onChange={this.updateSearch.bind(this)}\r\n                               value={this.state.searchMail}/>\r\n\r\n            </div>\r\n\r\n            <div className=\"gx-module-box-content\">\r\n\r\n              {loader ?\r\n                <div className=\"gx-loader-view\">\r\n                  <CircularProgress/>\r\n                </div>\r\n                : this.displayMail(currentMail, folderMails, noContentFoundMessage)}\r\n\r\n              <ComposeMail open={composeMail} user={user}\r\n                           onClose={this.handleRequestClose.bind(this)}\r\n                           onMailSend={this.onMailSend.bind(this)}/>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Mail;\r\n"]},"metadata":{},"sourceType":"module"}